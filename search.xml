<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>tmux安装和使用</title>
      <link href="/2023/cb6a7f97/"/>
      <url>/2023/cb6a7f97/</url>
      
        <content type="html"><![CDATA[<h2 id="tmux-安装和使用"><a href="#tmux-安装和使用" class="headerlink" title="tmux 安装和使用"></a>tmux 安装和使用</h2><h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p>tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；当然其功能远不止于此</p><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/tmux/tmux.git<br>cd tmux<br>sh autogen.sh<br>./configure &amp;&amp; make<br></code></pre></td></tr></table></figure><h4 id="常规安装"><a href="#常规安装" class="headerlink" title="常规安装"></a>常规安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Ubuntu 或 Debian</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install tmux</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">CentOS 或 Fedora</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum install tmux</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Mac</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew install tmux</span><br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text"># 启动tmux<br>$ tmux<br><br># 退出<br>$ exit 或 Ctrl+D<br></code></pre></td></tr></table></figure><p>在终端窗口上，运行tmux，其实就打开了一个终端与tmux服务的会话。只不过我们可以在tmux会话上层，再次输入’会话‘命令，使tmux上层运行的’会话’与终端窗口进行分离。这里面tmux其实可以称之为伪窗口（它其实是会话）。</p><p>启动tmux 后下面会提示 底部[0] 表示第0个tmux伪窗口，再启动一个tmux伪窗口，则为[1],依次递增</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text"># 启动命名tmux<br>$ tmux new -s &lt;name&gt;<br></code></pre></td></tr></table></figure><p>下面不会是数字而是设置的名称</p><h4 id="分离会话"><a href="#分离会话" class="headerlink" title="分离会话"></a>分离会话</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text"># 分离会话<br>$ tmux detach<br></code></pre></td></tr></table></figure><h4 id="查看开启的会话"><a href="#查看开启的会话" class="headerlink" title="查看开启的会话"></a>查看开启的会话</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看开启的会话</span><br><span class="hljs-variable">$</span> tmux <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h4 id="重接会话"><a href="#重接会话" class="headerlink" title="重接会话"></a>重接会话</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重接会话 使用伪窗口编号</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux attach -t 0</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重接会话 使用伪窗口名称</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux attach -t huaji</span><br></code></pre></td></tr></table></figure><h4 id="杀死会话"><a href="#杀死会话" class="headerlink" title="杀死会话"></a>杀死会话</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用会话编号</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux kill-session -t 0</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用会话名称</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux kill-session -t &lt;name&gt;</span><br></code></pre></td></tr></table></figure><h4 id="切换会话"><a href="#切换会话" class="headerlink" title="切换会话"></a>切换会话</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用会话编号</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux switch -t 0</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用会话名称</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux switch -t &lt;session-name&gt;</span><br></code></pre></td></tr></table></figure><h4 id="重命名会话"><a href="#重命名会话" class="headerlink" title="重命名会话"></a>重命名会话</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux rename-session -t 0 &lt;new-name&gt;</span><br></code></pre></td></tr></table></figure><h4 id="列出快捷键"><a href="#列出快捷键" class="headerlink" title="列出快捷键"></a>列出快捷键</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux list-keys</span><br></code></pre></td></tr></table></figure><h4 id="列出命令和参数"><a href="#列出命令和参数" class="headerlink" title="列出命令和参数"></a>列出命令和参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux list-commands</span><br></code></pre></td></tr></table></figure><h4 id="当前所有tmux会话"><a href="#当前所有tmux会话" class="headerlink" title="当前所有tmux会话"></a>当前所有tmux会话</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux info</span><br></code></pre></td></tr></table></figure><h4 id="重新加载tmux配置"><a href="#重新加载tmux配置" class="headerlink" title="重新加载tmux配置"></a>重新加载tmux配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux source-file ~/.tmux.conf</span><br></code></pre></td></tr></table></figure><h4 id="窗口划分"><a href="#窗口划分" class="headerlink" title="窗口划分"></a>窗口划分</h4><p>在tmux中，你可以轻松地划分一个窗口，以便在同一个会话中同时查看多个终端。下面是一些常见的窗口划分命令：</p><h5 id="水平划分当前窗口，将屏幕分为上下两部分"><a href="#水平划分当前窗口，将屏幕分为上下两部分" class="headerlink" title="水平划分当前窗口，将屏幕分为上下两部分"></a>水平划分当前窗口，将屏幕分为上下两部分</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux split-window</span><br></code></pre></td></tr></table></figure><h5 id="垂直划分当前窗口，将屏幕分为左右两部分"><a href="#垂直划分当前窗口，将屏幕分为左右两部分" class="headerlink" title="# 垂直划分当前窗口，将屏幕分为左右两部分"></a># 垂直划分当前窗口，将屏幕分为左右两部分</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux split-window -h</span><br></code></pre></td></tr></table></figure><h5 id="划分指定窗口"><a href="#划分指定窗口" class="headerlink" title="划分指定窗口"></a>划分指定窗口</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux split-window -t &lt;target-pane&gt;</span><br></code></pre></td></tr></table></figure><h5 id="关闭当前窗口中的一个划分"><a href="#关闭当前窗口中的一个划分" class="headerlink" title="# 关闭当前窗口中的一个划分"></a># 关闭当前窗口中的一个划分</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux kill-pane</span><br></code></pre></td></tr></table></figure><h4 id="窗口切换"><a href="#窗口切换" class="headerlink" title="窗口切换"></a>窗口切换</h4><p>切换tmux窗口是管理多个任务和应用程序实例的关键。以下是一些窗口切换的示例：</p><h5 id="切换到下一个窗口"><a href="#切换到下一个窗口" class="headerlink" title="切换到下一个窗口"></a>切换到下一个窗口</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux select-pane -t :.+</span><br></code></pre></td></tr></table></figure><h5 id="切换到上一个窗口"><a href="#切换到上一个窗口" class="headerlink" title="切换到上一个窗口"></a>切换到上一个窗口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs she">$ tmux select-pane -t :.-<br></code></pre></td></tr></table></figure><h5 id="切换到指定窗口编号"><a href="#切换到指定窗口编号" class="headerlink" title="切换到指定窗口编号"></a>切换到指定窗口编号</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">$ tmux select-window -t &lt;window-number&gt;<br></code></pre></td></tr></table></figure><h5 id="切换到上一个活动窗口"><a href="#切换到上一个活动窗口" class="headerlink" title="切换到上一个活动窗口"></a>切换到上一个活动窗口</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tmux last-window</span><br></code></pre></td></tr></table></figure><h4 id="窗口快捷键"><a href="#窗口快捷键" class="headerlink" title="窗口快捷键"></a>窗口快捷键</h4><p>tmux 中有一些内置的快捷键，用于执行常见任务。下面是一些常用的窗口快捷键：</p><ul><li><strong>Ctrl+b, c</strong>：创建一个新窗口。</li><li><strong>Ctrl+b, n</strong>：切换到下一个窗口。</li><li><strong>Ctrl+b, p</strong>：切换到上一个窗口。</li><li><strong>Ctrl+b, l</strong>：切换到最后一个使用的窗口。</li><li><strong>Ctrl+b, 0-9</strong>：切换到特定窗口。</li></ul><p>参考<a href="https://zhuanlan.zhihu.com/p/98384704">tmux使用教程 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> tmux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> linux </tag>
            
            <tag> 工具 </tag>
            
            <tag> tmux使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内企业SRC平台大全</title>
      <link href="/2023/77be028f/"/>
      <url>/2023/77be028f/</url>
      
        <content type="html"><![CDATA[<p>安全帮网址导航已全部收录   <a href="http://www.aquanbang.com/">www.aquanbang.com</a></p><p>天融信安全漏洞响应中心 <a href="https://src.topsec.com.cn/">https://src.topsec.com.cn/</a></p><p>统信安全应急响应中心 <a href="https://src.uniontech.com/">https://src.uniontech.com/</a></p><p>多点安全应急响应中心 <a href="https://src.dmall.com/">https://src.dmall.com/</a></p><p>NIO蔚来安全应急响应中心 <a href="https://niosrc.bugbank.cn/">https://niosrc.bugbank.cn/</a></p><p>贝锐安全应急响应中心 <a href="https://security.oray.com/">https://security.oray.com/</a></p><p>旷视安全应急响应中心 <a href="https://megvii.huoxian.cn/">https://megvii.huoxian.cn/</a></p><p>哈啰出行安全应急响应中心 <a href="https://src.hellobike.com/index.php">https://src.hellobike.com/index.php</a></p><p>TCL安全应急响应中心 <a href="https://src.tcl.com/zh/index">https://src.tcl.com/zh/index</a></p><p>Soul安全应急响应中心 <a href="https://security.soulapp.cn/">https://security.soulapp.cn/</a></p><p>Keep 安全应急响应中心 <a href="https://keep.huoxian.cn/">https://keep.huoxian.cn/</a></p><p>Apple Security Bounty <a href="https://security.apple.com/bounty/">https://security.apple.com/bounty/</a></p><p>理想安全应急响应中心 <a href="https://security.lixiang.com/index">https://security.lixiang.com/index</a></p><p>麦当劳中国安全应急响应中心 <a href="https://security.mcd.cn/">https://security.mcd.cn/</a></p><p>安恒应急响应中心 <a href="https://security.dbappsecurity.com.cn/">https://security.dbappsecurity.com.cn/</a></p><p>东方航空 <a href="https://src.ceair.com/">https://src.ceair.com/</a></p><p>迅雷安全应急响应中心 <a href="https://security.xunlei.com/">https://security.xunlei.com/</a></p><p>得物安全应急响应中心 <a href="https://security.dewu.com/">https://security.dewu.com/</a></p><p>荣耀SRC <a href="https://security.hihonor.com/src/#/">https://security.hihonor.com/src/#/</a></p><p>看云安全应急响应中心 <a href="https://security.kanyun.com/">https://security.kanyun.com/</a></p><p>银联安全应急响应中心 <a href="https://security.unionpay.com/">https://security.unionpay.com/</a></p><p>猎聘SRC <a href="https://security.liepin.com/">https://security.liepin.com/</a></p><p>360SRC <a href="https://security.360.cn/">https://security.360.cn/</a></p><p>58SRC <a href="https://security.58.com/">https://security.58.com/</a></p><p>阿里SRC <a href="https://security.alibaba.com/">https://security.alibaba.com/</a></p><p>蚂蚁集团SRC <a href="https://security.alipay.com/">https://security.alipay.com/</a></p><p>阿里本地生活SRC <a href="https://asrc.alibaba.com/#/">https://asrc.alibaba.com/#/</a></p><p>百度SRC <a href="https://bsrc.baidu.com/views/main/index.html#home">https://bsrc.baidu.com/views/main/index.html#home</a></p><p>字节跳动 <a href="https://security.bytedance.com/">https://security.bytedance.com/</a></p><p>贝壳安全 <a href="https://security.ke.com/">https://security.ke.com/</a></p><p>哔哩哔哩安全应急响应中心 <a href="https://security.bilibili.com/">https://security.bilibili.com/</a></p><p>BOSS直聘 <a href="https://src.zhipin.com/">https://src.zhipin.com/</a></p><p>贝宝金融安全应急响应中心 <a href="https://btcsrc.vulbox.com/">https://btcsrc.vulbox.com/</a></p><p>北京北森云计算SRC <a href="https://beisen.butian.net/">https://beisen.butian.net/</a></p><p>菜鸟安全应急响应中心 <a href="https://sec.cainiao.com/">https://sec.cainiao.com/</a></p><p>宜信安全应急响应中心 <a href="https://security.creditease.cn/">https://security.creditease.cn/</a></p><p>携程安全应急响应中心 <a href="https://sec.ctrip.com/">https://sec.ctrip.com/</a></p><p>滴滴SRC <a href="http://sec.didichuxing.com/">http://sec.didichuxing.com/</a></p><p>度小满SRC <a href="https://security.duxiaoman.com/index.html#/main">https://security.duxiaoman.com/index.html#/main</a></p><p>嘀嗒出行 <a href="https://dida.butian.net/">https://dida.butian.net/</a></p><p>丁香园安全应急响应中心 <a href="https://dxysrc.vulbox.com/">https://dxysrc.vulbox.com/</a></p><p>斗鱼SRC <a href="https://security.douyu.com/">https://security.douyu.com/</a></p><p>大疆安全应急响应中心 <a href="https://security.dji.com/">https://security.dji.com/</a></p><p>DHSRC 安全应急响应中心 <a href="http://dhsrc.dhgate.com/">http://dhsrc.dhgate.com/</a></p><p>魅族SRC <a href="https://sec.meizu.com/">https://sec.meizu.com/</a></p><p>东方财富安全应急响应中心 <a href="http://security.eastmoney.com/">http://security.eastmoney.com/</a></p><p>法大大安全应急响应中心 <a href="https://sec.fadada.com/">https://sec.fadada.com</a></p><p>焦点SRC <a href="https://security.focuschina.com/">https://security.focuschina.com/</a></p><p>富友SRC <a href="https://fsrc.fuiou.com/home/index.html">https://fsrc.fuiou.com/home/index.html</a></p><p>瓜子安全应急响应中心 <a href="https://security.guazi.com/">https://security.guazi.com/</a></p><p>华住安全响应中心 <a href="https://sec.huazhu.com/">https://sec.huazhu.com/</a></p><p>海康威视安全应急响应中心 <a href="https://www.hikvision.com/cn/support/CybersecurityCenter/">https://www.hikvision.com/cn/support/CybersecurityCenter/</a></p><p>恒昌安全应急响应中心 <a href="http://src.credithc.com/">http://src.credithc.com/</a></p><p>爱奇艺安全应急响应中心 <a href="https://security.iqiyi.com/">https://security.iqiyi.com/</a></p><p>合合安全应急响应中心 <a href="https://security.intsig.com/">https://security.intsig.com/</a></p><p>平安安全应急响应中心 <a href="https://isrc.pingan.com/homePage/index">https://isrc.pingan.com/homePage/index</a></p><p>讯飞安全响应中心 <a href="https://security.iflytek.com/">https://security.iflytek.com/</a></p><p>竞技世界 <a href="https://security.jj.cn/">https://security.jj.cn/</a></p><p>京东安全应急响应中心 <a href="https://security.jd.com/#/">https://security.jd.com/#/</a></p><p>酷狗安全应急响应中心 <a href="https://security.kugou.com/">https://security.kugou.com/</a></p><p>快看安全应急响应中心 <a href="https://security.kuaikanmanhua.com/">https://security.kuaikanmanhua.com/</a></p><p>快手SRC <a href="https://security.kuaishou.com/">https://security.kuaishou.com/</a></p><p>金山云安全应急响应中心 <a href="https://kysrc.vulbox.com/">https://kysrc.vulbox.com/</a></p><p>同程旅行安全应急响应中心 <a href="https://sec.ly.com/">https://sec.ly.com/</a></p><p>理想安全应急响应中心 <a href="https://security.lixiang.com/index">https://security.lixiang.com/index</a></p><p>乐信集团安全应急响应中心 <a href="https://lxsrc.vulbox.com/">https://lxsrc.vulbox.com/</a></p><p>货拉拉安全应急响应中心 <a href="https://llsrc.huolala.cn/#/home">https://llsrc.huolala.cn/#/home</a></p><p>联想集团安全应急响应中心 <a href="https://lsrc.vulbox.com/">https://lsrc.vulbox.com/</a></p><p>美丽联合集团 <a href="https://security.mogu.com/">https://security.mogu.com</a></p><p>陌陌安全应急响应中心 <a href="https://security.immomo.com/">https://security.immomo.com/</a></p><p>小米安全中心 <a href="https://sec.xiaomi.com/">https://sec.xiaomi.com/</a></p><p>美团安全应急响应中心 <a href="https://security.meituan.com/#/home">https://security.meituan.com/#/home</a></p><p>马蜂窝安全应急响应中心 <a href="https://security.mafengwo.cn/">https://security.mafengwo.cn/</a></p><p>网易安全中心 <a href="https://aq.163.com/">https://aq.163.com/</a></p><p>你我贷安全响应中心 <a href="https://www.niwodai.com/sec/index.do">https://www.niwodai.com/sec/index.do</a></p><p>一起教育安全应急响应中心 <a href="https://security.17zuoye.com/">https://security.17zuoye.com/</a></p><p>好未来安全应急响应中心 <a href="https://src.100tal.com/">https://src.100tal.com/</a></p><p>OPPO安全应急响应中心 <a href="https://security.oppo.com/cn/">https://security.oppo.com/cn/</a></p><p>华为PSIRT <a href="https://bugbounty.huawei.com/#/home">https://bugbounty.huawei.com/#/home</a></p><p>完美世界 安全应急响应中心 <a href="http://security.wanmei.com/">http://security.wanmei.com/</a></p><p>平安安全应急响应中心 <a href="https://security.pingan.com/">https://security.pingan.com/</a></p><p>人民教育出版社 <a href="https://pep.butian.net/">https://pep.butian.net/</a></p><p>奇安信集团 <a href="https://qianxin.butian.net/">https://qianxin.butian.net/</a></p><p>轻松筹安全应急响应中心 <a href="https://qssrc.vulbox.com/">https://qssrc.vulbox.com/</a></p><p>千米安全应急响应中心 <a href="http://security.qianmi.com/">http://security.qianmi.com/</a></p><p>融360安全应急响应中心 <a href="https://security.rong360.com/#/">https://security.rong360.com/#/</a></p><p>苏宁安全应急响应中心 <a href="https://security.suning.com/ssrc-web/index.jsp">https://security.suning.com/ssrc-web/index.jsp</a></p><p>安全狗漏洞响应中心 <a href="http://security.safedog.cn/index.html">http://security.safedog.cn/index.html</a></p><p>水滴安全应急响应中心 <a href="https://security.shuidihuzhu.com/">https://security.shuidihuzhu.com/</a></p><p>顺丰安全应急响应中心 <a href="https://sfsrc.sf-express.com/">https://sfsrc.sf-express.com/</a></p><p>深信服 <a href="https://security.sangfor.com.cn/">https://security.sangfor.com.cn/</a></p><p>上上签安全应急响应中心 <a href="https://src.bestsign.cn/">https://src.bestsign.cn/</a></p><p>腾讯SRC <a href="https://security.tencent.com/">https://security.tencent.com/</a></p><p>同盾安全应急响应中心 <a href="https://tdsrc.vulbox.com/">https://tdsrc.vulbox.com/</a></p><p>T3出行安全应急响应中心 <a href="https://security.t3go.cn/#/home">https://security.t3go.cn/#/home</a></p><p>同程数科安全响应中心 <a href="https://securitytcjf.com/">https://securitytcjf.com/</a></p><p>途虎安全应急响应中心 <a href="https://security.tuhu.cn/">https://security.tuhu.cn/</a></p><p>途牛安全应急响应中心 <a href="http://sec.tuniu.com/">http://sec.tuniu.com/</a></p><p>UCloud安全应急响应中心 <a href="https://src.ucloud.cn/">https://src.ucloud.cn/</a></p><p>VIPKID安全响应中心 <a href="https://security.vipkid.com.cn/">https://security.vipkid.com.cn/</a></p><p>vivo安全应急响应中心 <a href="https://security.vivo.com.cn/">https://security.vivo.com.cn/</a></p><p>唯品会 <a href="https://sec.vip.com/">https://sec.vip.com/</a></p><p>WiFi万能钥匙 <a href="https://sec.wifi.com/">https://sec.wifi.com/</a></p><p>微众银行安全响应中心 <a href="https://security.webank.com/">https://security.webank.com/</a></p><p>泛微安全应急响应中心 <a href="https://weaversrc.vulbox.com/">https://weaversrc.vulbox.com/</a></p><p>挖财安全应急响应中心 <a href="https://sec.wacai.com/">https://sec.wacai.com/</a></p><p>金山办公安全应急响应中心 <a href="https://security.wps.cn/">https://security.wps.cn/</a></p><p>微博 <a href="https://wsrc.weibo.com/">https://wsrc.weibo.com/</a></p><p>享道出行安全应急响应中心 <a href="https://src.saicmobility.com/">https://src.saicmobility.com/</a></p><p>喜马拉雅安全应急响应中心 <a href="https://security.ximalaya.com/">https://security.ximalaya.com/</a></p><p>小赢安全应急响应中心 <a href="https://security.xiaoying.com/">https://security.xiaoying.com/</a></p><p>知识星球安全应急响应中心 <a href="https://security.zsxq.com/">https://security.zsxq.com/</a></p><p>自如安全应急响应中心 <a href="https://zrsecurity.ziroom.com/">https://zrsecurity.ziroom.com/</a></p><p>萤石安全响应中心 <a href="https://ysrc.ys7.com/#/home">https://ysrc.ys7.com/#/home</a></p><p>有赞安全应急响应中心 <a href="https://src.youzan.com/">https://src.youzan.com/</a></p><p>中通安全应急响应中心 <a href="https://sec.zto.com/home">https://sec.zto.com/home</a></p><p>掌门教育安全应急响应中心 <a href="https://security.zhangmen.com/">https://security.zhangmen.com/</a></p><p>智联招聘安全应急响应中心 <a href="https://src.zhaopin.com/">https://src.zhaopin.com/</a></p><p>众安安全应急响应中心 <a href="https://security.zhongan.com/#/">https://security.zhongan.com/#/</a></p><p>猪八戒SRC <a href="https://sec.zbj.com/">https://sec.zbj.com/</a></p><p>文章来自：<a href="https://mp.weixin.qq.com/s?__biz=MzkzNjQwOTc4MQ==&mid=2247488377&idx=1&sn=ef3115b19471a6007eef456cc942f857&chksm=c29e7ca3f5e9f5b5d09fa7fafa357fa35161fd8c07c34123d1a21ba2bd5e5af3ded267a80117&scene=126&sessionid=1686819929&key=d1f05200b482cc782fb13cb647331427631542ecdc49d797bd0defe08178cdbe20974cc238f9ce6211aefffc7ca7da47d82a893981bf91868a88992c94f32a096bbdfec3ea92868e88b8b7a7b09a941ff3a121f4e8a5c19e68007a8caa6f47302c8e8ab23d52c2dcb1789be8cb657a17df1187e2860532ab79827a75d2dabcfc&ascene=15&uin=MzgxODQ4MjMz&devicetype=Windows+10+x64&version=63060012&lang=zh_CN&session_us=gh_404b73b90fc6&countrycode=GY&exportkey=n_ChQIAhIQmpnzW/kkUunw91Cjyvck0hLvAQIE97dBBAEAAAAAAFWNGezuiQIAAAAOpnltbLcz9gKNyK89dVj0y/n/abcTR98dbeZ8MeJ0BPX1IpVWURA7kFnMVI6R/isUjRiBEJXLJREMrVGaWjHftSsczKsAxoPLMqmOQn7cicAFdoqtfFmuQKj2pW58TTPxvqUdt8ncZA7iZANVQWJq6k1pycrJdwUT4DulE9Eaovpe/IcnRKszWHBBZgnZCzUHNyfDMV58TeQtOvhXItkpAmny16RmEZ5g16D9kWldwLNUmdQbB9MASK/mciFx76MwCDM4YDRoXYAyhwAi+oWjW9aKAmBPdzV/&acctmode=0&pas">安全帮</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SRC </tag>
            
            <tag> 企业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMC技术</title>
      <link href="/2023/8a4de02f/"/>
      <url>/2023/8a4de02f/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SMC"><a href="#什么是SMC" class="headerlink" title="什么是SMC"></a>什么是SMC</h2><p>SMC，即Self Modifying Code，动态代码加密技术，指通过修改代码或数据，阻止别人直接静态分析，然后在动态运行程序时对代码进行解密，达到程序正常运行的效果，而计算机病毒通常也会采用SMC技术动态修改内存中的可执行代码来达到变形或对代码加密的目的，从而躲过杀毒软件的查杀或者迷惑反病毒工作者对代码进行分析。通常来说，SMC使用汇编去写会比较好，因为它涉及更改机器码，但SMC也可以直接通过C、C++来实现。</p><p><strong>注意，如果使用VS20XX来实现SMC，需要将禁用优化，开启固定基址，关闭随机基址，关闭数据保护，并且选择release X64去编译</strong></p><p>以下的伪代码演示了一种SMC技术的典型应用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">IF .运行条件满足<br>  CALL DecryptProc （Address of MyProc）;对某个函数代码解密<br>  ........<br>  CALL MyProc                           ;调用这个函数<br>  ........<br>  CALL EncryptProc （Address of MyProc）;再对代码进行加密，防止程序被Dump<br></code></pre></td></tr></table></figure><h3 id="PE文件"><a href="#PE文件" class="headerlink" title="PE文件"></a>PE文件</h3><p>在程序中使用SMC最简单的方法就是修改（或加密）整个数据段或代码段，而想要修改段，我们就要了解PE文件结构， Microsoft为它的32位Windows系统设计了一种全新的可执行文件格式，被成为“Portable Executable”，也就是PE格式</p><p><img src="https://vip.helloimg.com/images/2023/10/10/ob96IA.gif" alt="img"></p><p>位于文件最开始部位的是一个MS-DOS头部和一段DOS stub代码，在PE文件中保留这一部分是为了DOS和Windows系统共存那一段时期设计的，当程序运行在DOS系统时，DOS系统按照DOS可执行文件的格式调用DOS stub代码，一个典型的DOS stub代码就是在控制台上输出一行提示：“This program cannot be run in MS-DOS mode”，当然不同的编译器产生的DOS stub代码也各不相同。曾经有一段时间很流行一种既可以在DOS系统上运行，又可以在Windows上运行的程序，其原理就是人为地替换这段DOS stub代码。紧跟在DOS stub代码之后的就是PE文件的内容了，首先是一个PE文件标志，这个标志有4个字节，也就是“PE&#x2F;0&#x2F;0”。这之后紧接着PE文件头（PE Header）和可选头部（Optional Header，也可以理解为这个PE文件的一些选项和参数）,这两个头结构存放PE文件的很多重要信息，比如文件包含的段（Sections）数、时间戳、装入基址和程序入口点等信息。这些之后是所有的段头部，段头部之后跟随着所有的段实体。PE文件的尾部还可能包含其它一些混杂的信息，包括重分配信息、调试符号表信息、行号信息等等，这些信息并不是一个PE文件必须的部分，比如正常发布的Release版本的程序就没有调试符号表信息和行号信息。</p><p>PE文件的段，是可以新增的，我们可以通过如下代码去新增一个段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> code_seg(<span class="hljs-string">&quot;.ddd&quot;</span>)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">abc</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;WIN&quot;</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">d</span><span class="hljs-params">()</span><br>&#123;<br>    ;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> code_seg()</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(linker, <span class="hljs-string">&quot;/SECTION:.ddd,ERW&quot;</span>)</span><br></code></pre></td></tr></table></figure><p>值得注意的是，段必须要设置成可读写的情况，这样我们才能去修改它</p><p>在新增了一个段后，我们要想加密它，就得先找到它，即寻址，网上告诉了我们很多寻址操作，但最简单的莫过于直接指针赋值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* b1 = (<span class="hljs-type">char</span>*)abc;<br><span class="hljs-type">char</span>* c1 = (<span class="hljs-type">char</span>*)d;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (; b1 &lt; c1; b1++)<br>&#123;<br>    i++;<br>&#125;<br><span class="hljs-type">void</span>* a1 = (<span class="hljs-type">char</span>*)abc;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)<br>&#123;<br>    *((BYTE*)a1 + i) ^= key;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接指针赋值可以找到它的地址，然后我这里的加密选择的是最简单无脑的异或，当我们异或后再跳转到该函数是，会发生报错</p><p><img src="https://vip.helloimg.com/images/2023/10/10/obOBRb.png" alt="img"></p><p>我们可以查看一下为什么会有异常，分别将异或前和异或后的机器码输出出来看看，我们会发现：<img src="https://vip.helloimg.com/images/2023/10/10/ob9gNm.png" alt="img"></p><p>机器码发生了变化，这直接导致代码被改变，无法被识别而报错</p><p>明白了这个，我们就可以去写一个简单的SMC了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>直接上代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><br> <br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> code_seg(<span class="hljs-string">&quot;.ddd&quot;</span>)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">abc</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;WIN&quot;</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">d</span><span class="hljs-params">()</span><br>&#123;<br>    ;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> code_seg()</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(linker, <span class="hljs-string">&quot;/SECTION:.ddd,ERW&quot;</span>)</span><br> <br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;input you key:&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; key;<br>    <span class="hljs-type">char</span>* b1 = (<span class="hljs-type">char</span>*)abc;<br>    <span class="hljs-type">char</span>* c1 = (<span class="hljs-type">char</span>*)d;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; b1 &lt; c1; b1++)<br>    &#123;<br>        i++;<br>    &#125;<br>    <span class="hljs-type">void</span>* a1 = (<span class="hljs-type">char</span>*)abc;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)<br>    &#123;<br>        *((BYTE*)a1 + i) ^= key;<br>    &#125;<br>    abc();<br>    system(<span class="hljs-string">&quot;PAUSE&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码编译出来的程序，是还未经加密的，所以直接解密无法运行，我们要手改一下他的机器码，把他的机器码加密一下</p><p>打开StudyPE+，查看段地址</p><p><img src="https://vip.helloimg.com/images/2023/10/10/ob9fkr.png" alt="img"></p><p>然后在winhex中寻找到相应的地址，将机器码改掉，我这里选择的是与0x2D异或，这样，0x2D就是我的key</p><p><img src="https://vip.helloimg.com/images/2023/10/10/ob9kjh.png" alt="img"></p><p><img src="https://vip.helloimg.com/images/2023/10/10/ob9YOq.png" alt="img"></p><p>修改完数据后保存，打开程序，输入key，发现程序正常运行了</p><p><img src="https://vip.helloimg.com/images/2023/10/10/ob9VEc.png" alt="img"><br>整挺好</p><p>本文始发于微信公众号（看雪学院）：<a href="https://mp.weixin.qq.com/s/b32h0PUgXKBATMWbPvdVgQ">SMC技术浅析</a></p>]]></content>
      
      
      <categories>
          
          <category> SMC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> RE </tag>
            
            <tag> SMC </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录adb和jeb动态调试实体机设备</title>
      <link href="/2023/93ffd795/"/>
      <url>/2023/93ffd795/</url>
      
        <content type="html"><![CDATA[<h1 id="ADB的常用命令"><a href="#ADB的常用命令" class="headerlink" title="ADB的常用命令"></a>ADB的常用命令</h1><h2 id="设备连接"><a href="#设备连接" class="headerlink" title="设备连接"></a>设备连接</h2><p><img src="https://vip.helloimg.com/images/2023/10/09/obM2iD.gif" alt="img"></p><ul><li>查看连接设备:<code>adb devices</code></li><li>TCP方式连接设备:<code>adb connect &lt;设备IP地址&gt;:端口号</code></li><li>USB方式连接设备:<code>adb USB</code></li><li>断开连接:<code>adb disconnect &lt;设备名称&gt;</code></li></ul><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><ul><li>安装APK:<code>adb install &lt;apk文件路径&gt;</code></li><li>卸载APP:<code>adb uninstall &lt;包名&gt;</code></li><li>查看安装的应用:<code>adb shell pm list packages</code></li><li>清除APP数据:<code>adb shell pm clear &lt;包名&gt;</code></li></ul><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><ul><li>推文件到设备:<code>adb push &lt;本地文件&gt; &lt;设备文件&gt;</code></li><li>拉文件从设备:<code>adb pull &lt;设备文件&gt; &lt;本地文件&gt;</code></li></ul><h2 id="模拟输入"><a href="#模拟输入" class="headerlink" title="模拟输入"></a>模拟输入</h2><ul><li>发送文本:<code>adb shell input text &lt;文本内容&gt;</code></li><li>点击事件:<code>adb shell input tap &lt;x坐标&gt; &lt;y坐标&gt;</code></li><li>发送按键事件:<code>adb shell input keyevent &lt;KEYCODE&gt;</code></li></ul><h2 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h2><ul><li>截图保存到电脑:<code>adb exec-out screencap -p &gt; sc.png</code></li><li>截图保存到设备:<code>adb shell screencap -p /sdcard/sc.png</code></li></ul><h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><ul><li>查看日志:<code>adb logcat</code></li><li>清空日志缓存:<code>adb logcat -c</code></li></ul><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><ul><li>启动&#x2F;关闭服务:<code>adb shell service &lt;启动/关闭&gt; &lt;服务名&gt;</code></li><li>查看设备信息:<code>adb shell getprop</code></li><li>重启设备:<code>adb reboot</code></li><li>查看帮助:<code>adb --help</code></li></ul><h1 id="JEB调试Android应用"><a href="#JEB调试Android应用" class="headerlink" title="JEB调试Android应用"></a>JEB调试Android应用</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>开启Android设备USB调试模式,连接PC</li><li>使设备与JEB在同一网络内,关闭任何可能拦截调试端口的防火墙</li><li>在设备上为调试打开端口,默认为8700</li><li>安装待调试的应用到设备上</li><li>并在手机上打开</li></ol><h2 id="JEB中设置"><a href="#JEB中设置" class="headerlink" title="JEB中设置"></a>JEB中设置</h2><ol><li><p>打开要调试的Android应用的apk文件</p></li><li><p>在关键代码位置下断点的行 <code>ctrl+B</code>下断点（<code>Smail</code>代码处）</p></li><li><p>配置调试连接参数:Debugger-&gt;Configure connections(附上)</p><p><img src="https://vip.helloimg.com/images/2023/10/09/obMne1.png" alt="image-20231009221155150"></p><ul><li>选择Android local debugger</li><li>设置设备IP地址和调试端口(默认8700)</li></ul></li><li><p>点击Debug按钮连接Android设备,选择进程</p><p>可以看到变量我的最爱<img src="https://vip.helloimg.com/images/2023/10/09/obMbKb.gif" alt="img"></p><p><img src="https://vip.helloimg.com/images/2023/10/09/obMH2K.png" alt="image-20231009221534594"></p></li></ol><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ol><li>在设备上启动目标应用进程</li><li>JEB中点击Resume按钮,程序会在断点处停止</li><li>可查看变量、调用栈、执行代码等</li><li>继续调试或跳过断点,结束后点击Disconnect断开连接</li></ol><p><img src="https://vip.helloimg.com/images/2023/10/09/obMMFo.png" alt="image-20231009221640250"></p>]]></content>
      
      
      <categories>
          
          <category> adb </category>
          
          <category> jeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 随笔 </tag>
            
            <tag> adb常见命令 </tag>
            
            <tag> 日常 </tag>
            
            <tag> jeb配置断点调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythonz3学习</title>
      <link href="/2023/30bc1fee/"/>
      <url>/2023/30bc1fee/</url>
      
        <content type="html"><![CDATA[<p>一件梭哈✌️工具学习</p><p>z3 是微软开发的的高性能约束求解工具。</p><p><img src="https://vip.helloimg.com/images/2023/10/07/obZqCt.webp" alt="System Diagram"></p><p> 也是 angr 和 triton 底层的约束求解器。其强大的数学求解能力在CTF解题中被广泛使用，</p><p>本文记录&#x2F;摘录一些常用的z3 Python API，以期能较为充分的运用z3的强大能力。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>$1, $2 表示第1，2个参数。以此类推</p><h2 id="数学类型"><a href="#数学类型" class="headerlink" title="数学类型"></a>数学类型</h2><table><thead><tr><th align="left">函数名</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">Int</td><td align="left">定义一个整数符号</td><td align="left"><code>x = Int(&#39;x&#39;)</code></td></tr><tr><td align="left">Ints</td><td align="left">定义几个整数 符号</td><td align="left"><code>x, y = Ints(&#39;x y&#39;)</code></td></tr><tr><td align="left">IntVector</td><td align="left">以$1为前缀定义，定义$2个Int</td><td align="left"><code>x = IntVector(&#39;x&#39;, 12)</code></td></tr><tr><td align="left">IntVal</td><td align="left">定义值为$1的一个Int，$1可以是string或整数</td><td align="left"><code>a = IntVal(1); b=IntVal(&#39;123&#39;)</code></td></tr><tr><td align="left">Real</td><td align="left">定义一个实数</td><td align="left"><code>x = Real(&#39;x&#39;)</code></td></tr><tr><td align="left">Reals</td><td align="left">同Ints</td><td align="left"><code>x = Reals(&#39;x y&#39;)</code></td></tr><tr><td align="left">RealVector</td><td align="left">同IntVector</td><td align="left"><code>x = RealVector(&#39;x&#39;, 12)</code></td></tr><tr><td align="left">RealVal</td><td align="left">同IntVal</td><td align="left"><code>x = RealVal(&#39;2.718&#39;)</code></td></tr><tr><td align="left">Q</td><td align="left">定义一个有理分数$1&#x2F;$2</td><td align="left"><code>x = Q(5, 8)</code></td></tr><tr><td align="left">RatVal</td><td align="left">与Q一样，定义一个有理分数$1 &#x2F; $2，实际Q是调用的RatVal</td><td align="left"><code>x = RatVal(5, 8)</code></td></tr><tr><td align="left">Bool</td><td align="left">定义一个布尔类型</td><td align="left"><code>p = Bool(&#39;p&#39;)</code></td></tr><tr><td align="left">Bools</td><td align="left">同Ints</td><td align="left"><code>p, q, r = Bools(&#39;p q r&#39;)</code></td></tr><tr><td align="left">BoolVector</td><td align="left">同IntVector</td><td align="left"><code>P = BoolVector(&#39;p&#39;, 5)</code></td></tr><tr><td align="left">BoolVal</td><td align="left">同IntVal</td><td align="left"><code>BoolVal(True)</code></td></tr></tbody></table><h2 id="有限类型"><a href="#有限类型" class="headerlink" title="有限类型"></a>有限类型</h2><table><thead><tr><th align="left">函数名</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">BitVec</td><td align="left">定义一个名为$1长度为$2 bit的位向量，如<code>BitVal(‘x’, 32)</code>表示C语言中的<code>int</code></td><td align="left"><code>x = BitVec(&#39;x&#39;, 16)</code></td></tr><tr><td align="left">BitVecs</td><td align="left">同<code>Ints</code></td><td align="left"><code>x, y, z = BitVecs(&#39;x y z&#39;, 16)</code></td></tr><tr><td align="left">BitVecVal</td><td align="left">定义值为$1，长度为$2 bit的位向量</td><td align="left"><code>v = BitVecVal(122, 8)</code></td></tr><tr><td align="left">FPSort</td><td align="left">按照$1 bit指数位， $2 bit有效位定义一个浮点类型，如<code>FPSort(8, 24)</code>表示C语言中<code>float</code>，<code>FPSort(11, 53)</code>表示C语言中<code>double</code>，当然z3已经内置了这几种类型：<code>Float16()</code>,<code>Float32()</code>, <code>Float64()</code>, <code>float128()</code></td><td align="left"><code>Single = FPSort(8, 24); Double = Float64()</code></td></tr><tr><td align="left">FP</td><td align="left">定义一个名为$1，类型为$2 的浮点数</td><td align="left"><code>x = FP(&#39;x&#39;, FPSort(8, 24))</code></td></tr><tr><td align="left">FPs</td><td align="left">同<code>Ints</code></td><td align="left"><code>x, y, z = FPs(&#39;x y z&#39;, FPSort(8, 24))</code></td></tr><tr><td align="left">FPVal</td><td align="left">定义值为$1，类型为$2的浮点数</td><td align="left"><code>f = FPVal(11.11, FPSort(8, 24))</code></td></tr><tr><td align="left">String</td><td align="left">定义一个名为$1 的字符串</td><td align="left"><code>a = String(&#39;a&#39;)</code></td></tr><tr><td align="left">Strings</td><td align="left">同<code>Ints</code></td><td align="left"><code>a, b, c = Strings(&#39;a b c&#39;)</code></td></tr><tr><td align="left">StringVal</td><td align="left">定义一个值为$1 的字符串</td><td align="left"><code>a = StringVal(&#39;a&#39;)</code></td></tr></tbody></table><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="数学类型-1"><a href="#数学类型-1" class="headerlink" title="数学类型"></a>数学类型</h2><h3 id="Int"><a href="#Int" class="headerlink" title="Int"></a>Int</h3><h4 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">as_long</td><td align="left">python int</td><td align="left">把z3的Int转换成python的int</td><td align="left"><code>IntVal(888).as_long()</code></td></tr><tr><td align="left">as_string</td><td align="left">python string</td><td align="left">把z3的Int转换成python的string</td><td align="left"><code>IntVal(888).as_string()</code></td></tr></tbody></table><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left"><strong>add</strong></td><td align="left">Int</td><td align="left">两个Int相加</td><td align="left"><code>Int(&#39;x&#39;) + Int(&#39;y&#39;); Int(&#39;x&#39;) + 10</code></td></tr><tr><td align="left"><strong>sub</strong></td><td align="left">Int</td><td align="left">两个Int相减</td><td align="left"><code>Int(&#39;x&#39;) - Int(&#39;y&#39;); Int(&#39;x&#39;) - 10</code></td></tr><tr><td align="left"><strong>mul</strong></td><td align="left">Int</td><td align="left">两个Int相乘</td><td align="left"><code>Int(&#39;x&#39;) * Int(&#39;y&#39;); Int(&#39;x&#39;) * 10</code></td></tr><tr><td align="left"><strong>div</strong></td><td align="left">Int</td><td align="left">两个Int相除</td><td align="left"><code>Int(&#39;x&#39;) / Int(&#39;y&#39;); Int(&#39;x&#39;) / 10</code></td></tr><tr><td align="left"><strong>mod</strong></td><td align="left">Int</td><td align="left">取模运算</td><td align="left"><code>Int(&#39;x&#39;) % Int(&#39;y&#39;); Int(&#39;x&#39;) % 10</code></td></tr><tr><td align="left"><strong>neg</strong></td><td align="left">Int</td><td align="left">取相反数</td><td align="left"><code>-Int(&#39;x&#39;)</code></td></tr><tr><td align="left"><strong>pow</strong></td><td align="left">Int</td><td align="left">指数运算</td><td align="left"><code>Int(&#39;x&#39;) ** Int(&#39;y&#39;); Int(&#39;x&#39;) ** 10</code></td></tr><tr><td align="left"><strong>eq</strong></td><td align="left">Bool</td><td align="left">得到相等的约束</td><td align="left"><code>Int(&#39;a&#39;) == Int(&#39;b&#39;)</code></td></tr><tr><td align="left"><strong>ne</strong></td><td align="left">Bool</td><td align="left">得到不等的约束</td><td align="left"><code>Int(&#39;a&#39;) != Int(&#39;b&#39;)</code></td></tr><tr><td align="left"><strong>lt</strong></td><td align="left">Bool</td><td align="left">得到小于的约束</td><td align="left"><code>Int(&#39;a&#39;) &lt; Int(&#39;b&#39;)</code></td></tr><tr><td align="left"><strong>le</strong></td><td align="left">Bool</td><td align="left">得到小于等于的约束</td><td align="left"><code>Int(&#39;a&#39;) &lt;= Int(&#39;b&#39;)</code></td></tr><tr><td align="left"><strong>gt</strong></td><td align="left">Bool</td><td align="left">得到大于的约束</td><td align="left"><code>Int(&#39;a&#39;) &gt; Int(&#39;b&#39;)</code></td></tr><tr><td align="left"><strong>ge</strong></td><td align="left">Bool</td><td align="left">得到大于等于的约束</td><td align="left"><code>Int(&#39;a&#39;) &gt;= Int(&#39;b&#39;)</code></td></tr><tr><td align="left">ToReal</td><td align="left">Real</td><td align="left">转换成Real类型</td><td align="left"><code>ToReal(Int(&#39;x&#39;))</code></td></tr><tr><td align="left">Int2BV</td><td align="left">BitVec</td><td align="left">把1 转换成长2 bit的BitVec</td><td align="left"><code>Int2BV(Int(&#39;x&#39;), 32)</code></td></tr></tbody></table><h3 id="Real"><a href="#Real" class="headerlink" title="Real"></a>Real</h3><h4 id="成员函数-1"><a href="#成员函数-1" class="headerlink" title="成员函数"></a>成员函数</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">numerator</td><td align="left">Int</td><td align="left">返回该数分数形式的分子</td><td align="left"><code>Q(3,5).numerator()</code></td></tr><tr><td align="left">numerator_as_long</td><td align="left">python int</td><td align="left">返回该数分数形式的分子</td><td align="left"><code>Q(3,5).numerator()</code></td></tr><tr><td align="left">denominator</td><td align="left">Int</td><td align="left">返回该数分数形式的分母</td><td align="left"><code>RealVal(12.25).denominator()</code></td></tr><tr><td align="left">denominator_as_long</td><td align="left">python int</td><td align="left">返回该数分数形式的分母</td><td align="left"><code>RealVal(&quot;1/77&quot;).denominator_as_long()</code></td></tr><tr><td align="left">as_fraction</td><td align="left">python Fraction</td><td align="left">得到该数的python Fraction对象</td><td align="left"><code>RealVal(&quot;1/12&quot;).as_fraction()</code></td></tr><tr><td align="left">as_decimal</td><td align="left">python string</td><td align="left">得到该数的小数形式并保留$1位小数</td><td align="left"><code>RealVal(&quot;1/33&quot;).as_decimal(3)</code></td></tr><tr><td align="left">as_long</td><td align="left">python int</td><td align="left">得到该数的python整数形式，如果该数不为整数则抛异常</td><td align="left">同Int</td></tr><tr><td align="left">as_string</td><td align="left">pyhton string</td><td align="left">同Int</td><td align="left">同Int</td></tr></tbody></table><h4 id="运算-1"><a href="#运算-1" class="headerlink" title="运算"></a>运算</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">Cbrt</td><td align="left">Real</td><td align="left">开三次方</td><td align="left"><code>Cbrt(Real(&#39;x&#39;))</code></td></tr><tr><td align="left">Sqrt</td><td align="left">Real</td><td align="left">开平方</td><td align="left"><code>Sqrt(Real(&#39;x&#39;))</code></td></tr><tr><td align="left">ToInt</td><td align="left">Int</td><td align="left">转换成Int类型</td><td align="left"><code>ToInt(Real(&#39;x&#39;))</code></td></tr></tbody></table><h3 id="Bool"><a href="#Bool" class="headerlink" title="Bool"></a>Bool</h3><h4 id="成员函数-2"><a href="#成员函数-2" class="headerlink" title="成员函数"></a>成员函数</h4><p>无</p><h4 id="运算-2"><a href="#运算-2" class="headerlink" title="运算"></a>运算</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">Xor</td><td align="left">Bool</td><td align="left">异或表达式</td><td align="left"><code>Xor(Bool(&#39;p&#39;), Bool(&#39;q&#39;))</code></td></tr><tr><td align="left">Not</td><td align="left">Bool</td><td align="left">取非表达式</td><td align="left"><code>Not(Bool(&#39;p&#39;))</code></td></tr><tr><td align="left">And</td><td align="left">Bool</td><td align="left">取与表达式</td><td align="left"><code>And(Bool(&#39;p&#39;), Bool(&#39;q&#39;), Bool(&#39;w&#39;))</code></td></tr><tr><td align="left">Or</td><td align="left">Bool</td><td align="left">取或表达式</td><td align="left"><code>Or(Bool(&#39;p&#39;), Bool(&#39;q&#39;), Bool(&#39;w&#39;))</code></td></tr><tr><td align="left">Implies</td><td align="left">Bool</td><td align="left">蕴含表达式</td><td align="left"><code>Implies(Bool(&#39;p&#39;), Bool(&#39;q&#39;))</code></td></tr></tbody></table><h2 id="有限类型-1"><a href="#有限类型-1" class="headerlink" title="有限类型"></a>有限类型</h2><h3 id="BitVec"><a href="#BitVec" class="headerlink" title="BitVec"></a>BitVec</h3><h4 id="成员函数-3"><a href="#成员函数-3" class="headerlink" title="成员函数"></a>成员函数</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">python int</td><td align="left">得到BitVec的长度</td><td align="left"><code>len = BitVec(&#39;x&#39;, 12).size()</code></td></tr></tbody></table><h4 id="运算-3"><a href="#运算-3" class="headerlink" title="运算"></a>运算</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">BV2Int</td><td align="left">Int</td><td align="left">$1 转换成Int，布尔值$2输入是否有符号</td><td align="left"><code>BV2Int(BitVec(&#39;a&#39;, 8), is_signed=True)</code></td></tr><tr><td align="left">Concat</td><td align="left">BitVec</td><td align="left"><code>BitVec</code> 类型参数拼接</td><td align="left"><code>Concat(BitVec(&#39;a&#39;, 8),BitVec(&#39;b&#39;, 8))</code></td></tr><tr><td align="left">Extract</td><td align="left">BitVec</td><td align="left">取$3[$2: $1]得到新的 <code>BitVec</code></td><td align="left"><code>Extract(6, 2, BitVec(&#39;a&#39;, 8))</code></td></tr><tr><td align="left">RotateLeft</td><td align="left">BitVec</td><td align="left">$1 循环左移 $2位</td><td align="left"><code>RotateLeft(BitVec(&#39;a&#39;, 8),2)</code></td></tr><tr><td align="left">RotateRight</td><td align="left">BitVec</td><td align="left">$1 循环右移 $2位</td><td align="left"><code>RotateRight(BitVec(&#39;a&#39;, 8),2)</code></td></tr><tr><td align="left">RepeatBitVec</td><td align="left">BitVec</td><td align="left">重复$2，$1 次<code>RepeatBitVec(2, a)</code></td><td align="left"><code>RepeatBitVec(2, BitVec(&#39;a&#39;, 8))</code></td></tr><tr><td align="left">SignExt</td><td align="left">BitVec</td><td align="left">向$2前缀填充$1 位<code>1</code></td><td align="left"><code>SignExt(8, BitVec(&#39;a&#39;, 32))</code></td></tr><tr><td align="left">ZeroExt</td><td align="left">BitVec</td><td align="left">向$2前缀填充$1 位<code>0</code></td><td align="left"><code>ZeroExt(8, BitVec(&#39;b&#39;, 32))</code></td></tr></tbody></table><p>有符号与无符号运算表</p><table><thead><tr><th align="left">运算</th><th align="left">有符号</th><th align="left">无符号</th></tr></thead><tbody><tr><td align="left">加法</td><td align="left">+</td><td align="left">+</td></tr><tr><td align="left">减法</td><td align="left">–</td><td align="left">–</td></tr><tr><td align="left">乘法</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">除法</td><td align="left">&#x2F;</td><td align="left">UDiv</td></tr><tr><td align="left">取模</td><td align="left">%</td><td align="left">URem</td></tr><tr><td align="left">小于等于</td><td align="left">&lt;&#x3D;</td><td align="left">ULE</td></tr><tr><td align="left">小于</td><td align="left">&lt;</td><td align="left">ULT</td></tr><tr><td align="left">大于等于</td><td align="left">&gt;&#x3D;</td><td align="left">UGE</td></tr><tr><td align="left">大于</td><td align="left">&gt;</td><td align="left">UGT</td></tr><tr><td align="left">右移运算</td><td align="left">&gt;&gt;</td><td align="left">LShR</td></tr><tr><td align="left">左移运算</td><td align="left">&lt;&lt;</td><td align="left">&lt;&lt;</td></tr></tbody></table><h3 id="FP"><a href="#FP" class="headerlink" title="FP"></a>FP</h3><h4 id="成员函数-4"><a href="#成员函数-4" class="headerlink" title="成员函数"></a>成员函数</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">ebits</td><td align="left">python int</td><td align="left">得到浮点数的指数位长度</td><td align="left"></td></tr><tr><td align="left">sbits</td><td align="left">python int</td><td align="left">得到浮点数的有效位长度</td><td align="left"></td></tr></tbody></table><h4 id="运算-4"><a href="#运算-4" class="headerlink" title="运算"></a>运算</h4><p>z3中定义了5种IEEE舍入规则:</p><ul><li>RoundNearestTiesToEven</li><li>RoundNearestTiesToAway</li><li>RoundTowardPositive</li><li>RoundTowardNegative</li><li>RoundTowardZero</li></ul><table><thead><tr><th align="left">Function</th><th align="left">Alias</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">RoundNearestTiesToEven</td><td align="left">RNE</td><td align="left">向偶数舍入</td></tr><tr><td align="left">RoundNearestTiesToAway</td><td align="left">RNA</td><td align="left">最近 舍入</td></tr><tr><td align="left">RoundTowardPositive</td><td align="left">RTP</td><td align="left">向+∞ 舍入</td></tr><tr><td align="left">RoundTowardNegative</td><td align="left">RTN</td><td align="left">向-∞ 舍入</td></tr><tr><td align="left">RoundTowardZero</td><td align="left">RTZ</td><td align="left">向0 舍入</td></tr></tbody></table><p>C语言默认为RNE</p><table><thead><tr><th align="left">Function</th><th align="left">Return Types</th><th align="left">Description</th><th align="left">Example</th></tr></thead><tbody><tr><td align="left">fpNaN</td><td align="left">FP</td><td align="left">返回 一个值为NaN的FP</td><td align="left"><code>fpNaN(FPSort(8, 24))</code></td></tr><tr><td align="left">fpPlusInfinit</td><td align="left">FP</td><td align="left">返回 一个值为+∞的FP</td><td align="left"><code>fpPlusInfinity(FPSort(8, 24))</code></td></tr><tr><td align="left">fpMinusInfinity</td><td align="left">FP</td><td align="left">返回 一个值为-∞的FP</td><td align="left"><code>fpMinusInfinity(FPSort(8, 24))</code></td></tr><tr><td align="left">fpInfinity</td><td align="left">FP</td><td align="left">返回 一个值为+∞ 或 -∞的FP</td><td align="left"><code>fpInfinity(FPSort(8, 24), False)</code></td></tr><tr><td align="left">fpPlusZero</td><td align="left">FP</td><td align="left">返回一个值为+0.0的FP</td><td align="left"><code>fpPlusZero(FPSort(8, 24))</code></td></tr><tr><td align="left">fpMinusZero</td><td align="left">FP</td><td align="left">返回 一个值为-0.0的FP</td><td align="left"><code>fpMinusZero(FPSort(8, 24))</code></td></tr><tr><td align="left">fpZero</td><td align="left">FP</td><td align="left">返回 一个值为+0.0 或 -0.0的FP</td><td align="left"><code>fpZero(FPSort(8, 24), False)</code></td></tr><tr><td align="left">fpAbs</td><td align="left">FP</td><td align="left">取绝对值</td><td align="left"><code>fpAbs(x)</code></td></tr><tr><td align="left">fpNeg</td><td align="left">FP</td><td align="left">取相反数</td><td align="left"><code>fpAbs(Neg)</code></td></tr><tr><td align="left">fpAdd</td><td align="left">FP</td><td align="left">按照$1舍入规则$2 + $3</td><td align="left"><code>fpAdd(RNE(), x, y)</code></td></tr><tr><td align="left">fpSub</td><td align="left">FP</td><td align="left">按照$1舍入规则$2 – $3</td><td align="left"><code>fpSub(RNE(), x, y)</code></td></tr><tr><td align="left">fpMul</td><td align="left">FP</td><td align="left">按照$1舍入规则$2 * $3</td><td align="left"><code>fpMul(RNE(), x, y)</code></td></tr><tr><td align="left">fpDiv</td><td align="left">FP</td><td align="left">按照$1舍入规则$2 &#x2F; $3</td><td align="left"><code>fpDiv(RNE(), x, y)</code></td></tr><tr><td align="left">fpRem</td><td align="left">FP</td><td align="left">按照$1舍入规则$2 % $3</td><td align="left"><code>fpRem(RNE(), x, y)</code></td></tr><tr><td align="left">fpMin</td><td align="left">FP</td><td align="left">返回$1与$2中最小的FP</td><td align="left"><code>fpMin(x, y)</code></td></tr><tr><td align="left">fpMax</td><td align="left">FP</td><td align="left">返回$1与$2最大的FP</td><td align="left"><code>fpMax(x, y)</code></td></tr><tr><td align="left">fpFMA</td><td align="left">FP</td><td align="left">按照$1舍入规则$2 * 3 + $4</td><td align="left"><code>fpFMA(RNE(), x, y, z)</code></td></tr><tr><td align="left">fpSqrt</td><td align="left">FP</td><td align="left">按照$1 舍入规则对$1开方</td><td align="left"><code>fpSqrt(RNE(), x)</code></td></tr><tr><td align="left">fpRoundToIntegral</td><td align="left">Int</td><td align="left">按照$1舍入规则对$2取整</td><td align="left"><code>fpRoundToIntegral(RNE(), a)</code></td></tr><tr><td align="left">fpIsNaN</td><td align="left">Bool</td><td align="left">判断$1是否为NaN</td><td align="left"><code>fpIsNaN(x)</code></td></tr><tr><td align="left">fpIsInf</td><td align="left">Bool</td><td align="left">判断$1是否为Inf</td><td align="left"><code>fpIsInf(x)</code></td></tr><tr><td align="left">fpIsZero</td><td align="left">Bool</td><td align="left">判断$1是否为0</td><td align="left"><code>fpIsZero(x)</code></td></tr><tr><td align="left">fpIsNormal</td><td align="left">Bool</td><td align="left">当fpIsNaN、fpIsInf、fpIsZero都不成立时为True</td><td align="left"><code>fpIsNormal(x)</code></td></tr><tr><td align="left">fpIsNegative</td><td align="left">Bool</td><td align="left">判断$1是否为负值</td><td align="left"><code>fpIsNegative(x)</code></td></tr><tr><td align="left">fpIsPositive</td><td align="left">Bool</td><td align="left">判断$1是否为正值</td><td align="left"><code>fpIsPositive(x)</code></td></tr><tr><td align="left">fpLT</td><td align="left">Bool</td><td align="left">$1 &lt; $2</td><td align="left"><code>fpLT(a,b)</code></td></tr><tr><td align="left">fpLEQ</td><td align="left">Bool</td><td align="left">$1 &lt;&#x3D; $2</td><td align="left"><code>fpLEQ(a,b)</code></td></tr><tr><td align="left">fpGT</td><td align="left">Bool</td><td align="left">$1 &gt; $2</td><td align="left"><code>fpGT(a,b)</code></td></tr><tr><td align="left">fpGEQ</td><td align="left">Bool</td><td align="left">$1 &gt;&#x3D; $2</td><td align="left"><code>fpGEQ(a,b)</code></td></tr><tr><td align="left">fpEQ</td><td align="left">Bool</td><td align="left">$1 &#x3D;&#x3D; $2</td><td align="left"><code>fpEQ(a,b)</code></td></tr><tr><td align="left">fpNEQ</td><td align="left">Bool</td><td align="left">$1 !&#x3D; $2</td><td align="left"><code>fpNEQ(a,b)</code></td></tr><tr><td align="left">fpBVToFP</td><td align="left">FP</td><td align="left">按照IEEE编码把$1转换成$2类型的浮点数</td><td align="left"><code>fpBVToFP(BitVecVal(0x41440000, 32), Float32())</code></td></tr><tr><td align="left">fpSignedToFP</td><td align="left">FP</td><td align="left">按照$1 舍入规则把$2转换成$3 类型</td><td align="left"><code>fpSignedToFP(RNE(), BitVecVal(-5, 32), Float32())</code></td></tr><tr><td align="left">fpUnsignedToFP</td><td align="left">FP</td><td align="left">按照$1 舍入规则把$2转换成$3 类型</td><td align="left"><code>fpUnsignedToFP(RNE(), BitVecVal(-5, 32), Float32())</code></td></tr><tr><td align="left">fpFPToFP</td><td align="left">FP</td><td align="left">按照$1 舍入规则把$2转换成$3 类型</td><td align="left"><code>fpFPToFP(RNE(), FPVal(1.0, Float32()), Float64())</code></td></tr><tr><td align="left">fpRealToFP</td><td align="left">FP</td><td align="left">按照$1 舍入规则把$2转换成$3 类型</td><td align="left"><code>fpRealToFP(RNE(), RealVal(1.5), Float32())</code></td></tr><tr><td align="left">fpToIEEEBV</td><td align="left">BitVec</td><td align="left">按照IEEE编码把$1转换成BitVec类型</td><td align="left"><code>fpToIEEEBV(FP(&#39;x&#39;, FPSort(8, 24)))</code></td></tr><tr><td align="left">fpToSBV</td><td align="left">BitVec</td><td align="left">按照$1舍入规则把$2转换成有符号BitVec类型</td><td align="left"><code>fpToSBV(RNE(), FP(&#39;x&#39;, FPSort(8, 24)), BitVecSort(32)))</code></td></tr><tr><td align="left">fpToUBV</td><td align="left">BitVec</td><td align="left">按照$1舍入规则把$2转换成无符号BitVec类型</td><td align="left"><code>fpToUBV(RNE(), FP(&#39;x&#39;, FPSort(8, 24)), BitVecSort(32)))</code></td></tr><tr><td align="left">fpToReal</td><td align="left">Real</td><td align="left">把$1转换成Real类型</td><td align="left"><code>fpToReal(x)</code></td></tr></tbody></table><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="成员函数-5"><a href="#成员函数-5" class="headerlink" title="成员函数"></a>成员函数</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">at</td><td align="left">String</td><td align="left">返回第$1个位置的值</td><td align="left"><code>StringVal(&#39;who am i&#39;).at(2)</code></td></tr><tr><td align="left"><strong>add</strong></td><td align="left">String</td><td align="left">拼接</td><td align="left"><code>String(&#39;a&#39;) + String(&#39;b&#39;)</code></td></tr></tbody></table><h4 id="运算-5"><a href="#运算-5" class="headerlink" title="运算"></a>运算</h4><table><thead><tr><th align="left">函数名</th><th align="left">返回类型</th><th align="left">说明</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">SubSeq</td><td align="left">String</td><td align="left">从$2位置开始在$1中取出长度为$3的字串</td><td align="left"><code>SubSeq(s,0,4)</code></td></tr><tr><td align="left">PrefixOf</td><td align="left">Bool</td><td align="left">判断$1是否是$2的前缀</td><td align="left"><code>PrefixOf(&quot;ab&quot;, &quot;abc&quot;)</code></td></tr><tr><td align="left">SuffixOf</td><td align="left">Bool</td><td align="left">判断$1是否是$2的后缀</td><td align="left"><code>SuffixOf(&quot;bc&quot;, &quot;abc&quot;)</code></td></tr><tr><td align="left">Contains</td><td align="left">Bool</td><td align="left">判断$1是否包含$2</td><td align="left"><code>Contains(&quot;abc&quot;, &quot;bc&quot;)</code></td></tr><tr><td align="left">Replace</td><td align="left">String</td><td align="left">把$1 中的第一个$2 字符替换成$3</td><td align="left"><code>Replace(&quot;aaa&quot;, &quot;a&quot;, &quot;b&quot;)</code></td></tr><tr><td align="left">IndexOf</td><td align="left">Int</td><td align="left">从$3位置开始在$1中搜索$2，$3默认为0</td><td align="left"><code>IndexOf(&quot;abcabc&quot;, &quot;bc&quot;， 2)</code></td></tr><tr><td align="left">LastIndexOf</td><td align="left">Int</td><td align="left">在$1中检索最后出现$2的位置</td><td align="left"><code>LastIndexOf(&quot;abcdc&quot;,&quot;dc&quot;)</code></td></tr><tr><td align="left">Length</td><td align="left">Int</td><td align="left">取长度</td><td align="left"><code>Length(StringVal(&#39;aaa&#39;))</code></td></tr><tr><td align="left">StrToInt</td><td align="left">Int</td><td align="left">String转Int</td><td align="left"><code>StrToInt(&quot;1&quot;)</code></td></tr><tr><td align="left">IntToStr</td><td align="left">String</td><td align="left">Int转String</td><td align="left"><code>IntToStr(IntVal(31))</code></td></tr></tbody></table><h1 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h1><p>一般情况下，用<code>Solver</code>创建一个求解器，利用成员函数<code>add</code>添加约束，最后使用成员函数<code>check</code>进行求解，成员函数<code>model()</code>得到求解结果。 例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b = Reals(<span class="hljs-string">&#x27;a b&#x27;</span>)<br>sol = Solver()<br>sol.add(a + b == <span class="hljs-number">128</span>)<br>sol.add(a - b == <span class="hljs-number">64</span>)<br><span class="hljs-keyword">assert</span> sol.check() == sat<br>rol = sol.model()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;a = <span class="hljs-subst">&#123;rol[a]&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;b = <span class="hljs-subst">&#123;rol[b]&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>还有一个函数<code>solve</code>则是直接在参数中添加约束。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = Int(<span class="hljs-string">&#x27;a&#x27;</span>)<br>solve(a &gt; <span class="hljs-number">0</span>, a &lt; <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="z3-解Base64"><a href="#z3-解Base64" class="headerlink" title="z3 解Base64"></a>z3 解Base64</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br>enc = <span class="hljs-string">&quot;kcGXlcG9ihRqlYy5&quot;</span><br>maps = StringVal(<span class="hljs-string">&quot;3GHIJKLMNOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5&quot;</span>)<br>sol = reduce(Concat, [Int2BV(If(i == <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-number">0</span>, IndexOf(maps, i, <span class="hljs-number">0</span>)), <span class="hljs-number">6</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc])<br>arr = <span class="hljs-built_in">reversed</span>([<span class="hljs-built_in">chr</span>(simplify(Extract(i + <span class="hljs-number">7</span>, i, sol)).as_long()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, sol.size(), <span class="hljs-number">8</span>)])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(arr))<br></code></pre></td></tr></table></figure><h2 id="例子1（原2023iscc线下re）"><a href="#例子1（原2023iscc线下re）" class="headerlink" title="例子1（原2023iscc线下re）"></a>例子1（原2023iscc线下re）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>arr3 = [x ^ <span class="hljs-number">18</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">123</span>, <span class="hljs-number">148</span>, <span class="hljs-number">62</span>, <span class="hljs-number">53</span>, <span class="hljs-number">24</span>, <span class="hljs-number">116</span>, <span class="hljs-number">244</span>, <span class="hljs-number">126</span>, <span class="hljs-number">63</span>, <span class="hljs-number">90</span>]]<br><br>s = Solver()<br>flag_value = [BitVec((<span class="hljs-string">&quot;%d&quot;</span> % i), <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]  <span class="hljs-comment"># 创建长度为10的BitVec列表，每个元素都是8位</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    s.add((((flag_value[i] &amp; <span class="hljs-number">7</span>) &lt;&lt; <span class="hljs-number">5</span>) | ((flag_value[i] &gt;&gt; <span class="hljs-number">3</span>) &amp; <span class="hljs-number">255</span>)) == arr3[i])<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> s.check() == sat:  <span class="hljs-comment"># 判断约束是否可满足</span><br>    model = s.model()  <span class="hljs-comment"># 获取可满足模型</span><br>    sorted_keys = <span class="hljs-built_in">sorted</span>(model, key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x.name()))  <span class="hljs-comment"># 按变量名称进行排序</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> sorted_keys:<br>        value = model[key].as_long()  <span class="hljs-comment"># 将变量的值转换为长整型</span><br>        flag += <span class="hljs-built_in">chr</span>(value)  <span class="hljs-comment"># 将长整型转换为字符并添加到标志字符串中</span><br>        char = <span class="hljs-built_in">chr</span>(value)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span> = <span class="hljs-subst">&#123;char&#125;</span>&quot;</span>)  <span class="hljs-comment"># 打印变量名及对应的字符值</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No solution&quot;</span>)  <span class="hljs-comment"># 若无解，则打印无解提示</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[+]--&gt;\t\t&quot;</span> + flag, end=<span class="hljs-string">&quot;&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="例子2（第十三届全国大学生网络安全预选赛的一道逆向题"><a href="#例子2（第十三届全国大学生网络安全预选赛的一道逆向题" class="headerlink" title="例子2（第十三届全国大学生网络安全预选赛的一道逆向题)"></a>例子2（第十三届全国大学生网络安全预选赛的一道逆向题)</h2><p>**<a href="https://pan.baidu.com/s/1hORDV0NR-6wzWfJGYpny_Q?pwd=v02b">re附件</a>**（提取码：v02b）</p><p>转十进制，解五组方程组（仅举一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>s = Solver()<br><br>v5,v6,v7,v8,v9,v10,v11,v12,v13      = Ints(<span class="hljs-string">&quot;5 6 7 8 9 10 11 12 13&quot;</span>)<br>v14,v15,v16,v17,v18,v19,v20,v21,v22 = Ints(<span class="hljs-string">&quot;14 15 16 17 18 19 20 21 22&quot;</span>)<br>v23,v24,v25,v26,v27,v28,v29,v30,v31 = Ints(<span class="hljs-string">&quot;23 24 25 26 27 28 29 30 31&quot;</span>)<br>v32,v33,v34,v35,v36,v37,v38,v39,v40 = Ints(<span class="hljs-string">&quot;32 33 34 35 36 37 38 39 40&quot;</span>)<br>v41,v42,v43,v44,v45,v46             = Ints(<span class="hljs-string">&quot;41 42 43 44 45 46&quot;</span>)<br><br>s.add(<span class="hljs-number">0x4F17</span> == <span class="hljs-number">34</span> * v8 + <span class="hljs-number">12</span> * v5 + <span class="hljs-number">53</span> * v6 + <span class="hljs-number">6</span> * v7 + <span class="hljs-number">58</span> * v9 + <span class="hljs-number">36</span> * v10 + v11)<br>s.add(<span class="hljs-number">0x9CF6</span> == <span class="hljs-number">27</span> * v9 + <span class="hljs-number">73</span> * v8 + <span class="hljs-number">12</span> * v7 + <span class="hljs-number">83</span> * v5 + <span class="hljs-number">85</span> * v6 + <span class="hljs-number">96</span> * v10 + <span class="hljs-number">52</span> * v11)<br>s.add(<span class="hljs-number">0x8DDB</span> == <span class="hljs-number">24</span> * v7 + <span class="hljs-number">78</span> * v5 + <span class="hljs-number">53</span> * v6 + <span class="hljs-number">36</span> * v8 + <span class="hljs-number">86</span> * v9 + <span class="hljs-number">25</span> * v10 + <span class="hljs-number">46</span> * v11)<br>s.add(<span class="hljs-number">0x8EA6</span> == <span class="hljs-number">78</span> * v6 + <span class="hljs-number">39</span> * v5 + <span class="hljs-number">52</span> * v7 + <span class="hljs-number">9</span> * v8 + <span class="hljs-number">62</span> * v9 + <span class="hljs-number">37</span> * v10 + <span class="hljs-number">84</span> * v11)<br>s.add(<span class="hljs-number">0x6929</span> == <span class="hljs-number">48</span> * v9 + <span class="hljs-number">14</span> * v7 + <span class="hljs-number">23</span> * v5 + <span class="hljs-number">6</span> * v6 + <span class="hljs-number">74</span> * v8 + <span class="hljs-number">12</span> * v10 + <span class="hljs-number">83</span> * v11)<br>s.add(<span class="hljs-number">0x9911</span> == <span class="hljs-number">15</span> * v10 + <span class="hljs-number">48</span> * v9 + <span class="hljs-number">92</span> * v7 + <span class="hljs-number">85</span> * v6 + <span class="hljs-number">27</span> * v5 + <span class="hljs-number">42</span> * v8 + <span class="hljs-number">72</span> * v11)<br>s.add(<span class="hljs-number">0x40A2</span> == <span class="hljs-number">26</span> * v10 + <span class="hljs-number">67</span> * v8 + <span class="hljs-number">6</span> * v6 + <span class="hljs-number">4</span> * v5 + <span class="hljs-number">3</span> * v7 + <span class="hljs-number">68</span> * v11)<br>s.add(<span class="hljs-number">0x2F3E</span> == <span class="hljs-number">34</span> * v15 + <span class="hljs-number">12</span> * v12 + <span class="hljs-number">53</span> * v13 + <span class="hljs-number">6</span> * v14 + <span class="hljs-number">58</span> * v16 + <span class="hljs-number">36</span> * v17 + v18)<br>s.add(<span class="hljs-number">0x62B6</span> == <span class="hljs-number">27</span> * v16 + <span class="hljs-number">73</span> * v15 + <span class="hljs-number">12</span> * v14 + <span class="hljs-number">83</span> * v12 + <span class="hljs-number">85</span> * v13 + <span class="hljs-number">96</span> * v17 + <span class="hljs-number">52</span> * v18)<br>s.add(<span class="hljs-number">0x4B82</span> == <span class="hljs-number">24</span> * v14 + <span class="hljs-number">78</span> * v12 + <span class="hljs-number">53</span> * v13 + <span class="hljs-number">36</span> * v15 + <span class="hljs-number">86</span> * v16 + <span class="hljs-number">25</span> * v17 + <span class="hljs-number">46</span> * v18)<br>s.add(<span class="hljs-number">0x486C</span> == <span class="hljs-number">78</span> * v13 + <span class="hljs-number">39</span> * v12 + <span class="hljs-number">52</span> * v14 + <span class="hljs-number">9</span> * v15 + <span class="hljs-number">62</span> * v16 + <span class="hljs-number">37</span> * v17 + <span class="hljs-number">84</span> * v18)<br>s.add(<span class="hljs-number">0x4002</span> == <span class="hljs-number">48</span> * v16 + <span class="hljs-number">14</span> * v14 + <span class="hljs-number">23</span> * v12 + <span class="hljs-number">6</span> * v13 + <span class="hljs-number">74</span> * v15 + <span class="hljs-number">12</span> * v17 + <span class="hljs-number">83</span> * v18)<br>s.add(<span class="hljs-number">0x52D7</span> == <span class="hljs-number">15</span> * v17 + <span class="hljs-number">48</span> * v16 + <span class="hljs-number">92</span> * v14 + <span class="hljs-number">85</span> * v13 + <span class="hljs-number">27</span> * v12 + <span class="hljs-number">42</span> * v15 + <span class="hljs-number">72</span> * v18)<br>s.add(<span class="hljs-number">0x2DEF</span> == <span class="hljs-number">26</span> * v17 + <span class="hljs-number">67</span> * v15 + <span class="hljs-number">6</span> * v13 + <span class="hljs-number">4</span> * v12 + <span class="hljs-number">3</span> * v14 + <span class="hljs-number">68</span> * v18)<br>s.add(<span class="hljs-number">0x28DC</span> == <span class="hljs-number">34</span> * v22 + <span class="hljs-number">12</span> * v19 + <span class="hljs-number">53</span> * v20 + <span class="hljs-number">6</span> * v21 + <span class="hljs-number">58</span> * v23 + <span class="hljs-number">36</span> * v24 + v25)<br>s.add(<span class="hljs-number">0x640D</span> == <span class="hljs-number">27</span> * v23 + <span class="hljs-number">73</span> * v22 + <span class="hljs-number">12</span> * v21 + <span class="hljs-number">83</span> * v19 + <span class="hljs-number">85</span> * v20 + <span class="hljs-number">96</span> * v24 + <span class="hljs-number">52</span> * v25)<br>s.add(<span class="hljs-number">0x528F</span> == <span class="hljs-number">24</span> * v21 + <span class="hljs-number">78</span> * v19 + <span class="hljs-number">53</span> * v20 + <span class="hljs-number">36</span> * v22 + <span class="hljs-number">86</span> * v23 + <span class="hljs-number">25</span> * v24 + <span class="hljs-number">46</span> * v25)<br>s.add(<span class="hljs-number">0x613B</span> == <span class="hljs-number">78</span> * v20 + <span class="hljs-number">39</span> * v19 + <span class="hljs-number">52</span> * v21 + <span class="hljs-number">9</span> * v22 + <span class="hljs-number">62</span> * v23 + <span class="hljs-number">37</span> * v24 + <span class="hljs-number">84</span> * v25)<br>s.add(<span class="hljs-number">0x4781</span> == <span class="hljs-number">48</span> * v23 + <span class="hljs-number">14</span> * v21 + <span class="hljs-number">23</span> * v19 + <span class="hljs-number">6</span> * v20 + <span class="hljs-number">74</span> * v22 + <span class="hljs-number">12</span> * v24 + <span class="hljs-number">83</span> * v25)<br>s.add(<span class="hljs-number">0x6B17</span> == <span class="hljs-number">15</span> * v24 + <span class="hljs-number">48</span> * v23 + <span class="hljs-number">92</span> * v21 + <span class="hljs-number">85</span> * v20 + <span class="hljs-number">27</span> * v19 + <span class="hljs-number">42</span> * v22 + <span class="hljs-number">72</span> * v25)<br>s.add(<span class="hljs-number">0x3237</span> == <span class="hljs-number">26</span> * v24 + <span class="hljs-number">67</span> * v22 + <span class="hljs-number">6</span> * v20 + <span class="hljs-number">4</span> * v19 + <span class="hljs-number">3</span> * v21 + <span class="hljs-number">68</span> * v25)<br>s.add(<span class="hljs-number">0x2A93</span> == <span class="hljs-number">34</span> * v29 + <span class="hljs-number">12</span> * v26 + <span class="hljs-number">53</span> * v27 + <span class="hljs-number">6</span> * v28 + <span class="hljs-number">58</span> * v30 + <span class="hljs-number">36</span> * v31 + v32)<br>s.add(<span class="hljs-number">0x615F</span> == <span class="hljs-number">27</span> * v30 + <span class="hljs-number">73</span> * v29 + <span class="hljs-number">12</span> * v28 + <span class="hljs-number">83</span> * v26 + <span class="hljs-number">85</span> * v27 + <span class="hljs-number">96</span> * v31 + <span class="hljs-number">52</span> * v32)<br>s.add(<span class="hljs-number">0x50BE</span> == <span class="hljs-number">24</span> * v28 + <span class="hljs-number">78</span> * v26 + <span class="hljs-number">53</span> * v27 + <span class="hljs-number">36</span> * v29 + <span class="hljs-number">86</span> * v30 + <span class="hljs-number">25</span> * v31 + <span class="hljs-number">46</span> * v32)<br>s.add(<span class="hljs-number">0x598E</span> == <span class="hljs-number">78</span> * v27 + <span class="hljs-number">39</span> * v26 + <span class="hljs-number">52</span> * v28 + <span class="hljs-number">9</span> * v29 + <span class="hljs-number">62</span> * v30 + <span class="hljs-number">37</span> * v31 + <span class="hljs-number">84</span> * v32)<br>s.add(<span class="hljs-number">0x4656</span> == <span class="hljs-number">48</span> * v30 + <span class="hljs-number">14</span> * v28 + <span class="hljs-number">23</span> * v26 + <span class="hljs-number">6</span> * v27 + <span class="hljs-number">74</span> * v29 + <span class="hljs-number">12</span> * v31 + <span class="hljs-number">83</span> * v32)<br>s.add(<span class="hljs-number">0x5B31</span> == <span class="hljs-number">15</span> * v31 + <span class="hljs-number">48</span> * v30 + <span class="hljs-number">92</span> * v28 + <span class="hljs-number">85</span> * v27 + <span class="hljs-number">27</span> * v26 + <span class="hljs-number">42</span> * v29 + <span class="hljs-number">72</span> * v32)<br>s.add(<span class="hljs-number">0x313A</span> == <span class="hljs-number">26</span> * v31 + <span class="hljs-number">67</span> * v29 + <span class="hljs-number">6</span> * v27 + <span class="hljs-number">4</span> * v26 + <span class="hljs-number">3</span> * v28 + <span class="hljs-number">68</span> * v32)<br>s.add(<span class="hljs-number">0x3010</span> == <span class="hljs-number">34</span> * v36 + <span class="hljs-number">12</span> * v33 + <span class="hljs-number">53</span> * v34 + <span class="hljs-number">6</span> * v35 + <span class="hljs-number">58</span> * v37 + <span class="hljs-number">36</span> * v38 + v39)<br>s.add(<span class="hljs-number">0x67FE</span> == <span class="hljs-number">27</span> * v37 + <span class="hljs-number">73</span> * v36 + <span class="hljs-number">12</span> * v35 + <span class="hljs-number">83</span> * v33 + <span class="hljs-number">85</span> * v34 + <span class="hljs-number">96</span> * v38 + <span class="hljs-number">52</span> * v39)<br>s.add(<span class="hljs-number">0x4D5F</span> == <span class="hljs-number">24</span> * v35 + <span class="hljs-number">78</span> * v33 + <span class="hljs-number">53</span> * v34 + <span class="hljs-number">36</span> * v36 + <span class="hljs-number">86</span> * v37 + <span class="hljs-number">25</span> * v38 + <span class="hljs-number">46</span> * v39)<br>s.add(<span class="hljs-number">0x58DB</span> == <span class="hljs-number">78</span> * v34 + <span class="hljs-number">39</span> * v33 + <span class="hljs-number">52</span> * v35 + <span class="hljs-number">9</span> * v36 + <span class="hljs-number">62</span> * v37 + <span class="hljs-number">37</span> * v38 + <span class="hljs-number">84</span> * v39)<br>s.add(<span class="hljs-number">0x3799</span> == <span class="hljs-number">48</span> * v37 + <span class="hljs-number">14</span> * v35 + <span class="hljs-number">23</span> * v33 + <span class="hljs-number">6</span> * v34 + <span class="hljs-number">74</span> * v36 + <span class="hljs-number">12</span> * v38 + <span class="hljs-number">83</span> * v39)<br>s.add(<span class="hljs-number">0x60A0</span> == <span class="hljs-number">15</span> * v38 + <span class="hljs-number">48</span> * v37 + <span class="hljs-number">92</span> * v35 + <span class="hljs-number">85</span> * v34 + <span class="hljs-number">27</span> * v33 + <span class="hljs-number">42</span> * v36 + <span class="hljs-number">72</span> * v39)<br>s.add(<span class="hljs-number">0x2750</span> == <span class="hljs-number">26</span> * v38 + <span class="hljs-number">67</span> * v36 + <span class="hljs-number">6</span> * v34 + <span class="hljs-number">4</span> * v33 + <span class="hljs-number">3</span> * v35 + <span class="hljs-number">68</span> * v39)<br>s.add(<span class="hljs-number">0x3759</span> == <span class="hljs-number">34</span> * v43 + <span class="hljs-number">12</span> * v40 + <span class="hljs-number">53</span> * v41 + <span class="hljs-number">6</span> * v42 + <span class="hljs-number">58</span> * v44 + <span class="hljs-number">36</span> * v45 + v46)<br>s.add(<span class="hljs-number">0x8953</span> == <span class="hljs-number">27</span> * v44 + <span class="hljs-number">73</span> * v43 + <span class="hljs-number">12</span> * v42 + <span class="hljs-number">83</span> * v40 + <span class="hljs-number">85</span> * v41 + <span class="hljs-number">96</span> * v45 + <span class="hljs-number">52</span> * v46)<br>s.add(<span class="hljs-number">0x7122</span> == <span class="hljs-number">24</span> * v42 + <span class="hljs-number">78</span> * v40 + <span class="hljs-number">53</span> * v41 + <span class="hljs-number">36</span> * v43 + <span class="hljs-number">86</span> * v44 + <span class="hljs-number">25</span> * v45 + <span class="hljs-number">46</span> * v46)<br>s.add(<span class="hljs-number">0x81F9</span> == <span class="hljs-number">78</span> * v41 + <span class="hljs-number">39</span> * v40 + <span class="hljs-number">52</span> * v42 + <span class="hljs-number">9</span> * v43 + <span class="hljs-number">62</span> * v44 + <span class="hljs-number">37</span> * v45 + <span class="hljs-number">84</span> * v46)<br>s.add(<span class="hljs-number">0x5524</span> == <span class="hljs-number">48</span> * v44 + <span class="hljs-number">14</span> * v42 + <span class="hljs-number">23</span> * v40 + <span class="hljs-number">6</span> * v41 + <span class="hljs-number">74</span> * v43 + <span class="hljs-number">12</span> * v45 + <span class="hljs-number">83</span> * v46)<br>s.add(<span class="hljs-number">0x8971</span> == <span class="hljs-number">15</span> * v45 + <span class="hljs-number">48</span> * v44 + <span class="hljs-number">92</span> * v42 + <span class="hljs-number">85</span> * v41 + <span class="hljs-number">27</span> * v40 + <span class="hljs-number">42</span> * v43 + <span class="hljs-number">72</span> * v46)<br>s.add(<span class="hljs-number">0x3A1D</span> == <span class="hljs-number">26</span> * v45 + <span class="hljs-number">67</span> * v43 + <span class="hljs-number">6</span> * v41 + <span class="hljs-number">4</span> * v40 + <span class="hljs-number">3</span> * v42 + <span class="hljs-number">68</span> * v46)<br><br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> s.check() == sat:  <span class="hljs-comment"># 判断约束是否可满足</span><br>    model = s.model()  <span class="hljs-comment"># 获取可满足模型</span><br>    sorted_keys = <span class="hljs-built_in">sorted</span>(model, key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x.name()))  <span class="hljs-comment"># 按变量名称进行排序</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> sorted_keys:<br>        value = model[key].as_long()  <span class="hljs-comment"># 将变量的值转换为长整型</span><br>        flag += <span class="hljs-built_in">chr</span>(value)  <span class="hljs-comment"># 将长整型转换为字符并添加到标志字符串中</span><br>        char = <span class="hljs-built_in">chr</span>(value)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span> = <span class="hljs-subst">&#123;char&#125;</span>&quot;</span>)  <span class="hljs-comment"># 打印变量名及对应的字符值</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[+]--&gt;\t\t&quot;</span> + flag, end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No solution&quot;</span>)  <span class="hljs-comment"># 若无解，则打印无解提示</span><br><br><span class="hljs-comment">#flag&#123;7e171d43-63b9-4e18-990e-6e14c2afe648&#125;</span><br></code></pre></td></tr></table></figure><h3 id="例题3（-GUET-CTF2019-re）"><a href="#例题3（-GUET-CTF2019-re）" class="headerlink" title="例题3（[GUET-CTF2019]re）"></a>例题3（[GUET-CTF2019]re）</h3><p>题目链接：[GUET-CTF2019]re<br>题目下载：<a href="https://buuoj.cn/files/a83068d825343ba3c969ac5f79f9d39c/attachment.zip?token=eyJ1c2VyX2lkIjoxODk1LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjo1ODN9.Xj0T_w.2dcVWbSwUk1bzT1NfPaj9EY26Ww">点击下载</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>s = Solver()<br>a1 = [BitVec((<span class="hljs-string">&quot;%d&quot;</span> % i), <span class="hljs-number">32</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]  <br><span class="hljs-comment"># 创建长度为10的BitVec列表，每个元素都是8位</span><br>s.add( <span class="hljs-number">1629056</span> * a1[<span class="hljs-number">0</span>] == <span class="hljs-number">166163712</span> )<br>s.add( <span class="hljs-number">6771600</span> * a1[<span class="hljs-number">1</span>] == <span class="hljs-number">731332800</span> )<br>s.add( <span class="hljs-number">3682944</span> * a1[<span class="hljs-number">2</span>] == <span class="hljs-number">357245568</span> )<br>s.add( <span class="hljs-number">10431000</span> * a1[<span class="hljs-number">3</span>] == <span class="hljs-number">1074393000</span> )<br>s.add( <span class="hljs-number">3977328</span> * a1[<span class="hljs-number">4</span>] == <span class="hljs-number">489211344</span> )<br>s.add( <span class="hljs-number">5138336</span> * a1[<span class="hljs-number">5</span>] == <span class="hljs-number">518971936</span> )<br>s.add( <span class="hljs-number">7532250</span> * a1[<span class="hljs-number">7</span>] == <span class="hljs-number">406741500</span> )<br>s.add( <span class="hljs-number">5551632</span> * a1[<span class="hljs-number">8</span>] == <span class="hljs-number">294236496</span> )<br>s.add( <span class="hljs-number">3409728</span> * a1[<span class="hljs-number">9</span>] == <span class="hljs-number">177305856</span> )<br>s.add( <span class="hljs-number">13013670</span> * a1[<span class="hljs-number">10</span>] == <span class="hljs-number">650683500</span> )<br>s.add( <span class="hljs-number">6088797</span> * a1[<span class="hljs-number">11</span>] == <span class="hljs-number">298351053</span> )<br>s.add( <span class="hljs-number">7884663</span> * a1[<span class="hljs-number">12</span>] == <span class="hljs-number">386348487</span> )<br>s.add( <span class="hljs-number">8944053</span> * a1[<span class="hljs-number">13</span>] == <span class="hljs-number">438258597</span> )<br>s.add( <span class="hljs-number">5198490</span> * a1[<span class="hljs-number">14</span>] == <span class="hljs-number">249527520</span> )<br>s.add( <span class="hljs-number">4544518</span> * a1[<span class="hljs-number">15</span>] == <span class="hljs-number">445362764</span> )<br>s.add( <span class="hljs-number">3645600</span> * a1[<span class="hljs-number">17</span>] == <span class="hljs-number">174988800</span> )<br>s.add( <span class="hljs-number">10115280</span> * a1[<span class="hljs-number">16</span>] == <span class="hljs-number">981182160</span> )<br>s.add( <span class="hljs-number">9667504</span> * a1[<span class="hljs-number">18</span>] == <span class="hljs-number">493042704</span> )<br>s.add( <span class="hljs-number">5364450</span> * a1[<span class="hljs-number">19</span>] == <span class="hljs-number">257493600</span> )<br>s.add( <span class="hljs-number">13464540</span> * a1[<span class="hljs-number">20</span>] == <span class="hljs-number">767478780</span> )<br>s.add( <span class="hljs-number">5488432</span> * a1[<span class="hljs-number">21</span>] == <span class="hljs-number">312840624</span> )<br>s.add( <span class="hljs-number">14479500</span> * a1[<span class="hljs-number">22</span>] == <span class="hljs-number">1404511500</span> )<br>s.add( <span class="hljs-number">6451830</span> * a1[<span class="hljs-number">23</span>] == <span class="hljs-number">316139670</span> )<br>s.add( <span class="hljs-number">6252576</span> * a1[<span class="hljs-number">24</span>] == <span class="hljs-number">619005024</span> )<br>s.add( <span class="hljs-number">7763364</span> * a1[<span class="hljs-number">25</span>] == <span class="hljs-number">372641472</span> )<br>s.add( <span class="hljs-number">7327320</span> * a1[<span class="hljs-number">26</span>] == <span class="hljs-number">373693320</span> )<br>s.add( <span class="hljs-number">8741520</span> * a1[<span class="hljs-number">27</span>] == <span class="hljs-number">498266640</span> )<br>s.add( <span class="hljs-number">8871876</span> * a1[<span class="hljs-number">28</span>] == <span class="hljs-number">452465676</span> )<br>s.add( <span class="hljs-number">4086720</span> * a1[<span class="hljs-number">29</span>] == <span class="hljs-number">208422720</span> )<br>s.add( <span class="hljs-number">9374400</span> * a1[<span class="hljs-number">30</span>] == <span class="hljs-number">515592000</span> )<br>s.add(<span class="hljs-number">5759124</span> * a1[<span class="hljs-number">31</span>] == <span class="hljs-number">719890500</span>)<br>    flag = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> s.check() == sat:  <span class="hljs-comment"># 判断约束是否可满足</span><br>        model = s.model()  <span class="hljs-comment"># 获取可满足模型</span><br>        sorted_keys = <span class="hljs-built_in">sorted</span>(model, key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x.name()))  <span class="hljs-comment"># 按变量名称进行排序</span><br>        <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> sorted_keys:<br>            value = model[key].as_long()  <span class="hljs-comment"># 将变量的值转换为长整型</span><br>            flag += <span class="hljs-built_in">chr</span>(value)  <span class="hljs-comment"># 将长整型转换为字符并添加到标志字符串中</span><br>            char = <span class="hljs-built_in">chr</span>(value)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span> = <span class="hljs-subst">&#123;char&#125;</span>&quot;</span>)  <span class="hljs-comment"># 打印变量名及对应的字符值</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No solution&quot;</span>)  <span class="hljs-comment"># 若无解，则打印无解提示</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[+]--&gt;\t\t&quot;</span> + flag, end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>​</p><p>参考<a href="https://blog.shi1011.cn/learn/1789">从CTF入门z3 solver - 翻车鱼 (shi1011.cn)</a><br>拿<a href="https://harvey.plus/index.php/archives/121/">2020 CISCN - Mssn Harvey - CTFer &amp;&amp; DreamRedteam</a>附件<br>参考<a href="https://blog.csdn.net/Palmer9/article/details/104210881">https://blog.csdn.net/Palmer9/article/details/104210881</a></p>]]></content>
      
      
      <categories>
          
          <category> z3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> 逆向 </tag>
            
            <tag> python-z3-solver </tag>
            
            <tag> z3 </tag>
            
            <tag> 一件梭哈✌️工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_angr_模板</title>
      <link href="/2023/577f7508/"/>
      <url>/2023/577f7508/</url>
      
        <content type="html"><![CDATA[<h2 id="python-angr-模块"><a href="#python-angr-模块" class="headerlink" title="python  angr 模块"></a>python  angr 模块</h2><h3 id="安装-angr"><a href="#安装-angr" class="headerlink" title="安装 angr"></a>安装 angr</h3><p><code>pip install angr</code></p><h3 id="ipython-angr写法模板"><a href="#ipython-angr写法模板" class="headerlink" title="ipython angr写法模板"></a>ipython angr写法模板</h3><p><img src="https://vip.helloimg.com/images/2023/10/07/oHyoeh.png" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入angr 模块</span><br><span class="hljs-keyword">import</span> angr<br><br><span class="hljs-comment">#新建一个工程</span><br>p = angr.Project(<span class="hljs-string">&quot;./00_angr_find&quot;</span>)  <br><br><span class="hljs-comment">#初始化 工程入口状态</span><br>init_state = p.factory.entry_state()<br><br><span class="hljs-comment">#创建符号执行的模拟管理器</span><br>sm = p.factory.simulation_manager(init_state)<br><br><span class="hljs-comment"># 开始符号执行，探索满足条件的执行路径find 查找取得地方 avoid 不去的地方</span><br>sm.explore(find=<span class="hljs-number">0x08048678</span>)<br><span class="hljs-comment">#sm.explore(find=0x08048678,avoid=0x0804866B)</span><br><br><br><span class="hljs-comment">#获取找到的第一个满足条件的状态</span><br>sm.found[<span class="hljs-number">0</span>]  <span class="hljs-comment">#可省略</span><br><br><span class="hljs-comment">#获取找到的第一个满足条件的状态</span><br>found_state = sm.found[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 获取程序的输入数据</span><br>found_state.posix.dumps(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># 获取程序的输出数据</span><br>found_state.posix.dumps(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br>    init_state = p.factory.entry_state()<br>    sm = p.factory.simulation_manager(init_state)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    sm.explore(find=is_good, avoid=is_bad)<br>    <span class="hljs-keyword">if</span> sm.found:<br>        found_state = sm.found[<span class="hljs-number">0</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(found_state.posix.dumps(<span class="hljs-number">0</span>)))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br><br><br></code></pre></td></tr></table></figure><h3 id="03-angr-symbolic-registers-寄存器符号化"><a href="#03-angr-symbolic-registers-寄存器符号化" class="headerlink" title="03_angr_symbolic_registers 寄存器符号化"></a>03_angr_symbolic_registers 寄存器符号化</h3><p>起始地址跳过get_user_input的下一个地址</p><p><img src="https://vip.helloimg.com/images/2023/10/07/oHy1Fr.png" alt="image-20231007164157398"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br>    <span class="hljs-comment"># 创建一个angr项目，加载二进制文件</span><br><br>    start_addr = <span class="hljs-number">0x80488C7</span><br>    init_state = p.factory.blank_state(addr=start_addr)<br>    <span class="hljs-comment"># 在指定地址创建一个初始状态</span><br><br>    pass1 = claripy.BVS(<span class="hljs-string">&#x27;pass1&#x27;</span>, <span class="hljs-number">32</span>)<br>    pass2 = claripy.BVS(<span class="hljs-string">&#x27;pass2&#x27;</span>, <span class="hljs-number">32</span>)<br>    pass3 = claripy.BVS(<span class="hljs-string">&#x27;pass3&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-comment"># 创建三个符号变量</span><br><br>    init_state.regs.eax = pass1<br>    init_state.regs.ebx = pass2<br>    init_state.regs.edx = pass3<br>    <span class="hljs-comment"># 将符号变量赋值给寄存器eax、ebx和edx</span><br><br>    sm = p.factory.simulation_manager(init_state)<br>    <span class="hljs-comment"># 创建一个符号执行管理器</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 定义两个函数，用于判断状态是否为好的或坏的</span><br><br>    sm.explore(find=is_good, avoid=is_bad)<br>    <span class="hljs-comment"># 对符号执行管理器进行探索，寻找满足is_good条件且避免is_bad条件的路径</span><br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        found_state = sm.found[<span class="hljs-number">0</span>]<br><br>        passwd1 = found_state.solver.<span class="hljs-built_in">eval</span>(pass1)<br>        passwd2 = found_state.solver.<span class="hljs-built_in">eval</span>(pass2)<br>        passwd3 = found_state.solver.<span class="hljs-built_in">eval</span>(pass3)<br>        <span class="hljs-comment"># 获取找到的状态中的符号变量的具体值</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;:x&#125; &#123;:x&#125; &#123;:x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd1, passwd2, passwd3))<br>        <span class="hljs-comment"># 打印解决方案</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not find the solution&#x27;</span>)<br>        <span class="hljs-comment"># 如果没有找到解决方案，则抛出异常</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br><br></code></pre></td></tr></table></figure><h4 id="04-angr-symbolic-stack-栈符号化"><a href="#04-angr-symbolic-stack-栈符号化" class="headerlink" title="04_angr_symbolic_stack 栈符号化"></a>04_angr_symbolic_stack 栈符号化</h4><p>起始地址跳过___isoc99_scanf的下一个地址</p><p><code>add     esp, 10h</code>是恢复栈空间平衡</p><p><img src="https://vip.helloimg.com/images/2023/10/07/oHy3nT.png" alt="image-20231007164420424"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br>    <span class="hljs-comment"># 创建一个angr项目，加载二进制文件</span><br><br>    start_addr = <span class="hljs-number">0x80486AE</span>  <span class="hljs-comment"># 地址</span><br>    init_state = p.factory.blank_state(addr=start_addr)<br>    <span class="hljs-comment"># 在指定地址创建一个初始状态</span><br><br>    padding_size = <span class="hljs-number">8</span><br>    init_state.stack_push(init_state.regs.ebp)<br>    init_state.regs.ebp = init_state.regs.esp<br>    init_state.regs.esp -= padding_size<br>    <span class="hljs-comment"># 配置堆栈框架</span><br><br>    pass1 = init_state.solver.BVS(<span class="hljs-string">&#x27;pass1&#x27;</span>, <span class="hljs-number">32</span>)<br>    pass2 = init_state.solver.BVS(<span class="hljs-string">&#x27;pass2&#x27;</span>, <span class="hljs-number">32</span>)<br>    <span class="hljs-comment"># 创建两个符号变量</span><br><br>    init_state.stack_push(pass1)<br>    init_state.stack_push(pass2)<br>    <span class="hljs-comment"># 将符号变量放到堆栈上</span><br><br>    sm = p.factory.simgr(init_state)<br>    <span class="hljs-comment"># 创建一个符号执行管理器</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 定义两个函数，用于判断状态是否为好的或坏的</span><br><br>    sm.explore(find=is_good, avoid=is_bad)<br>    <span class="hljs-comment"># 对符号执行管理器进行探索，寻找满足is_good条件且避免is_bad条件的路径</span><br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        found_state = sm.found[<span class="hljs-number">0</span>]<br>        passwd1 = found_state.solver.<span class="hljs-built_in">eval</span>(pass1)<br>        passwd2 = found_state.solver.<span class="hljs-built_in">eval</span>(pass2)<br>        <span class="hljs-comment"># 获取找到的状态中的符号变量的具体值</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;:x&#125; &#123;:x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd1, passwd2))<br>        <span class="hljs-comment"># 打印解决方案</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)<br>        <span class="hljs-comment"># 如果没有找到解决方案，则抛出异常</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br><br></code></pre></td></tr></table></figure><h3 id="05-angr-symbolic-memory-内存符号化"><a href="#05-angr-symbolic-memory-内存符号化" class="headerlink" title="05_angr_symbolic_memory 内存符号化"></a>05_angr_symbolic_memory 内存符号化</h3><p>起始地址跳过___isoc99_scanf的下一个地址</p><p><code>add     esp, 20h</code>是恢复栈空间平衡<br><img src="https://vip.helloimg.com/images/2023/10/07/oHyEwo.png" alt="image-20231007164845370"></p><p>让后程序是<code>__cdecl</code>  <a href="https://learn.microsoft.com/zh-cn/cpp/cpp/cdecl?view=msvc-170">__cdecl | Microsoft Learn原理</a></p><p>参数传递顺序 | 从右向左。</p><p><img src="https://vip.helloimg.com/images/2023/10/07/oHylw9.png" alt="image-20231007165314484"> </p><p><img src="https://vip.helloimg.com/images/2023/10/07/oHyvDR.png" alt="image-20231007165516873"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br>    <span class="hljs-comment"># 创建一个angr项目，加载二进制文件</span><br><br>    start_addr = <span class="hljs-number">0x8048618</span>  <span class="hljs-comment"># 地址</span><br>    init_state = p.factory.blank_state(addr=start_addr)<br>    <span class="hljs-comment"># 在指定地址创建一个初始状态</span><br><br>    padding_size = <span class="hljs-number">8</span><br>    init_state.stack_push(init_state.regs.ebp)<br>    init_state.regs.ebp = init_state.regs.esp<br>    init_state.regs.esp -= padding_size<br>    <span class="hljs-comment"># 配置堆栈框架</span><br><br>    p1 = init_state.solver.BVS(<span class="hljs-string">&#x27;p1&#x27;</span>, <span class="hljs-number">64</span>)<br>    p2 = init_state.solver.BVS(<span class="hljs-string">&#x27;p2&#x27;</span>, <span class="hljs-number">64</span>)<br>    p3 = init_state.solver.BVS(<span class="hljs-string">&#x27;p3&#x27;</span>, <span class="hljs-number">64</span>)<br>    p4 = init_state.solver.BVS(<span class="hljs-string">&#x27;p4&#x27;</span>, <span class="hljs-number">64</span>)<br>    <span class="hljs-comment"># 创建符号变量</span><br><br>    p1_addr = <span class="hljs-number">0xAB232C0</span><br>    p2_addr = <span class="hljs-number">0xAB232C8</span><br>    p3_addr = <span class="hljs-number">0xAB232D0</span><br>    p4_addr = <span class="hljs-number">0xAB232D8</span><br>    <span class="hljs-comment"># 参数地址</span><br><br>    init_state.memory.store(p1_addr, p1)<br>    init_state.memory.store(p2_addr, p2)<br>    init_state.memory.store(p3_addr, p3)<br>    init_state.memory.store(p4_addr, p4)<br>    <span class="hljs-comment"># 将符号变量存储到内存中</span><br><br>    sm = p.factory.simgr(init_state)<br>    <span class="hljs-comment"># 创建一个符号执行管理器</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 定义两个函数，用于判断状态是否为好的或坏的</span><br><br>    sm.explore(find=is_good, avoid=is_bad)<br>    <span class="hljs-comment"># 对符号执行管理器进行探索，寻找满足is_good条件且避免is_bad条件的路径</span><br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        found_state = sm.found[<span class="hljs-number">0</span>]<br>        passwd1 = found_state.solver.<span class="hljs-built_in">eval</span>(p1, cast_to=<span class="hljs-built_in">bytes</span>)<br>        passwd2 = found_state.solver.<span class="hljs-built_in">eval</span>(p2, cast_to=<span class="hljs-built_in">bytes</span>)<br>        passwd3 = found_state.solver.<span class="hljs-built_in">eval</span>(p3, cast_to=<span class="hljs-built_in">bytes</span>)<br>        passwd4 = found_state.solver.<span class="hljs-built_in">eval</span>(p4, cast_to=<span class="hljs-built_in">bytes</span>)<br>        <span class="hljs-comment"># 获取找到的状态中的符号变量的具体值</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd1.decode(<span class="hljs-string">&quot;utf-8&quot;</span>), passwd2.decode(<span class="hljs-string">&quot;utf-8&quot;</span>), passwd3.decode(<span class="hljs-string">&quot;utf-8&quot;</span>), passwd4.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)))<br>        <span class="hljs-comment"># 打印解决方案</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)<br>        <span class="hljs-comment"># 如果没有找到解决方案，则抛出异常</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br><br></code></pre></td></tr></table></figure><h3 id="06-angr-symbolic-dynamic-memory-动态内存地址"><a href="#06-angr-symbolic-dynamic-memory-动态内存地址" class="headerlink" title="06_angr_symbolic_dynamic_memory 动态内存地址"></a>06_angr_symbolic_dynamic_memory 动态内存地址</h3><p>起始地址跳过___isoc99_scanf的下一个地址</p><p><code>add     esp, 10h</code>是恢复栈空间平衡</p><p><img src="https://vip.helloimg.com/images/2023/10/07/oHyN4A.png" alt="image-20231007165802494"></p><p><img src="https://vip.helloimg.com/images/2023/10/07/oHyQ05.png" alt="image-20231007165913264"></p><p>在跳过输入后的angr 查看当前栈地址<code>print(&quot;ESP:&quot;,init_state.regs.esp)</code></p><p>0x7fff0000</p><p>尝试给buffer0偏移+0x100,buffer1+0x200</p><p>在将原始的buffer0和buffer1的地址给到程序里面</p><p><img src="https://vip.helloimg.com/images/2023/10/07/oHyr4K.png" alt="image-20231007170259012"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br>    <span class="hljs-comment"># 创建一个angr项目，加载二进制文件</span><br><br>    start_addr = <span class="hljs-number">0x80486AF</span>  <span class="hljs-comment"># 地址</span><br>    init_state = p.factory.blank_state(addr=start_addr)<br>    <span class="hljs-comment"># 在指定call scanf后的地址创建一个初始状态</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ESP:&quot;</span>,init_state.regs.esp)<span class="hljs-comment">#0x7fff0000</span><br>    buffer0 = <span class="hljs-number">0x7fff0000</span> - <span class="hljs-number">0x100</span><br>    buffer1 = <span class="hljs-number">0x7fff0000</span> - <span class="hljs-number">0x200</span><br><br>    buffer0_addr = <span class="hljs-number">0xA2DEF74</span><br>    buffer1_addr = <span class="hljs-number">0xA2DEF7C</span><br><br>    init_state.memory.store(buffer0_addr, buffer0, endness=p.arch.memory_endness)<br>    init_state.memory.store(buffer1_addr, buffer1, endness=p.arch.memory_endness)<br>    <span class="hljs-comment"># 将buffer0和buffer1的地址存储到指定的地址中</span><br><br>    p1 = init_state.solver.BVS(<span class="hljs-string">&#x27;p1&#x27;</span>, <span class="hljs-number">64</span>)<br>    p2 = init_state.solver.BVS(<span class="hljs-string">&#x27;p2&#x27;</span>, <span class="hljs-number">64</span>)<br>    <span class="hljs-comment"># 创建两个64位的符号变量</span><br><br>    init_state.memory.store(buffer0, p1)<br>    init_state.memory.store(buffer1, p2)<br>    <span class="hljs-comment"># 将符号变量存储到buffer0和buffer1的地址中</span><br><br>    sm = p.factory.simgr(init_state)<br>    <span class="hljs-comment"># 创建一个符号执行管理器</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 定义两个函数，用于判断状态是否为好的或坏的</span><br><br>    sm.explore(find=is_good, avoid=is_bad)<br>    <span class="hljs-comment"># 对符号执行管理器进行探索，寻找满足is_good条件且避免is_bad条件的路径</span><br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        found_state = sm.found[<span class="hljs-number">0</span>]<br>        passwd1 = found_state.solver.<span class="hljs-built_in">eval</span>(p1, cast_to=<span class="hljs-built_in">bytes</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        passwd2 = found_state.solver.<span class="hljs-built_in">eval</span>(p2, cast_to=<span class="hljs-built_in">bytes</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-comment"># 获取找到的状态中的符号变量的具体值</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd1, passwd2))<br>        <span class="hljs-comment"># 打印解决方案</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)<br>        <span class="hljs-comment"># 如果没有找到解决方案，则抛出异常</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br><br><br></code></pre></td></tr></table></figure><h3 id="07-angr-symbolic-file-文件符号化"><a href="#07-angr-symbolic-file-文件符号化" class="headerlink" title="07_angr_symbolic_file 文件符号化"></a>07_angr_symbolic_file 文件符号化</h3><p>起始地址跳过输入的下一个地址</p><p><code>add     esp, 10h</code>是恢复栈空间平衡</p><p><img src="https://vip.helloimg.com/images/2023/10/07/oHyj9S.png" alt="image-20231007170652656"></p><p>配置打开文件名称和文件大小</p><p><img src="https://vip.helloimg.com/images/2023/10/07/oHyhxD.png" alt="image-20231007170529406"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br>    <span class="hljs-comment"># 创建一个angr项目，加载二进制文件</span><br><br>    start_addr = <span class="hljs-number">0x80488BC</span>  <span class="hljs-comment"># 地址</span><br>    init_state = p.factory.blank_state(addr=start_addr)<br>    <span class="hljs-comment"># 在指定call scanf后的地址创建一个初始状态</span><br><br>    FileName = <span class="hljs-string">&quot;FOQVSBZB.txt&quot;</span><br>    FileSize = <span class="hljs-number">0x40</span><br><br>    passwd = init_state.solver.BVS(<span class="hljs-string">&quot;passwd&quot;</span>,FileSize*<span class="hljs-number">8</span>)<br>    sim_file = angr.storage.SimFile(FileName,content=passwd,size = FileSize)<br>    init_state.fs.insert(FileName,sim_file)<br>    <span class="hljs-comment"># 插入一个符号化文件，将文件名设置为“FOQVSBZB.txt”，文件大小为64字节（0x40）。</span><br>    <span class="hljs-comment"># 该文件的内容为一个64位符号变量，名称为passwd。</span><br><br>    sm = p.factory.simulation_manager(init_state)  <br>    <span class="hljs-comment"># 创建一个符号执行管理器</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 定义两个函数，用于判断状态是否为好的或坏的</span><br><br>    sm.explore(find=is_good, avoid=is_bad)<br>    <span class="hljs-comment"># 对符号执行管理器进行探索，寻找满足is_good条件且避免is_bad条件的路径</span><br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        found_state = sm.found[<span class="hljs-number">0</span>]<br>        passwd1 = found_state.solver.<span class="hljs-built_in">eval</span>(passwd, cast_to=<span class="hljs-built_in">bytes</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-comment"># 获取找到的状态中的符号变量passwd的具体值</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd1))<br>        <span class="hljs-comment"># 打印解决方案</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)<br>        <span class="hljs-comment"># 如果没有找到解决方案，则抛出异常</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br><br></code></pre></td></tr></table></figure><h4 id="08-angr-constraints"><a href="#08-angr-constraints" class="headerlink" title="08_angr_constraints"></a>08_angr_constraints</h4><p>直接跳到buffer地址中执行</p><p><img src="https://vip.helloimg.com/images/2023/10/07/ob519g.png" alt="image-20231007170951294"></p><p>检查地址</p><p><img src="https://vip.helloimg.com/images/2023/10/07/ob53kM.png" alt="image-20231007171124816"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br>    <span class="hljs-comment"># 创建一个angr项目，加载二进制文件</span><br><br>    start_addr = <span class="hljs-number">0x0804863C</span>  <span class="hljs-comment"># 地址</span><br>    init_state = p.factory.blank_state(addr=start_addr)<br>    <span class="hljs-comment"># 在指定call scanf后的地址创建一个初始状态</span><br><br>    <br>    buffer_addr = <span class="hljs-number">0x804A040</span><br>    passwd = init_state.solver.BVS(<span class="hljs-string">&quot;passwd&quot;</span>, <span class="hljs-number">16</span>*<span class="hljs-number">8</span>)<br>    init_state.memory.store(buffer_addr, passwd)<br>    <span class="hljs-comment"># 设置缓冲区地址，并将16字节的符号变量passwd存储到该地址</span><br>    <br><br>    sm = p.factory.simgr(init_state)<br>    <span class="hljs-comment"># 创建一个符号执行管理器</span><br>    <br>    check_addr = <span class="hljs-number">0x804857C</span><br>    sm.explore(find=check_addr)<br>    <span class="hljs-comment"># 对符号执行管理器进行探索，寻找到达检查地址的路径</span><br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        check_state = sm.found[<span class="hljs-number">0</span>]<br><br>        desired_string = <span class="hljs-string">&quot;AUPDNNPROEZRJWKB&quot;</span><br>        check_param1 = buffer_addr<br>        check_param2 = <span class="hljs-number">0x10</span><br>        <span class="hljs-comment"># 设置所需字符串、缓冲区地址和长度参数</span><br><br>        check_bvs = check_state.memory.load(check_param1, check_param2)<br>        <span class="hljs-comment"># 加载缓冲区内容</span><br><br>        check_constraint = desired_string == check_bvs<br>        check_state.add_constraints(check_constraint)<br>        <span class="hljs-comment"># 添加约束条件，要求缓冲区内容等于目标字符串</span><br><br>        passwd1 = check_state.solver.<span class="hljs-built_in">eval</span>(passwd, cast_to=<span class="hljs-built_in">bytes</span>).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-comment"># 获取符号变量passwd的具体值</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd1))<br>        <span class="hljs-comment"># 打印解决方案</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)<br>        <span class="hljs-comment"># 如果没有找到解决方案，则抛出异常</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br><br></code></pre></td></tr></table></figure><h3 id="09-angr-hooks-hook"><a href="#09-angr-hooks-hook" class="headerlink" title="09_angr_hooks hook"></a>09_angr_hooks hook</h3><p>挂钩子</p><p>call地址减去下面的地址就是跳过的长度</p><p><img src="https://vip.helloimg.com/images/2023/10/07/ob5xIn.png" alt="image-20231007171524832"></p><p>这边输入存放的buffer地址</p><p><img src="https://vip.helloimg.com/images/2023/10/07/ob5mAz.png" alt="image-20231007171700841"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br><br>    init_state = p.factory.entry_state()<br>    <span class="hljs-comment"># 创建初始状态</span><br><br>    check_addr = <span class="hljs-number">0x80486CA</span><br>    check_skip_size = <span class="hljs-number">0x5</span><br>    <span class="hljs-comment"># 设置检查地址和长度</span><br><br><span class="hljs-meta">    @p.hook(<span class="hljs-params">check_addr, length=check_skip_size</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_hook</span>(<span class="hljs-params">state</span>):<br>        user_input_addr = <span class="hljs-number">0x804A044</span><br>        user_input_length = <span class="hljs-number">0x10</span><br>        <span class="hljs-comment"># 设置用户输入的地址和长度</span><br><br>        user_input_bvs = state.memory.load(user_input_addr, user_input_length)<br>        desired = <span class="hljs-string">&quot;OSIWHBXIFOQVSBZB&quot;</span><br>        <span class="hljs-comment"># 加载用户输入的内容和目标字符串</span><br><br>        state.regs.eax = claripy.If(desired == user_input_bvs,<br>                                    claripy.BVV(<span class="hljs-number">1</span>,<span class="hljs-number">32</span>),<br>                                    claripy.BVV(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>))<br>        <span class="hljs-comment"># 根据用户输入内容是否等于目标字符串，设置eax寄存器的值为1或0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 定义一个判断状态是否正确的函数</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 定义一个判断状态是否错误的函数</span><br><br>    sm = p.factory.simgr(init_state)<br>    <span class="hljs-comment"># 创建符号执行管理器</span><br><br>    sm.explore(find=is_good, avoid=is_bad)<br>    <span class="hljs-comment"># 对符号执行管理器进行探索，找到满足is_good条件且避免is_bad条件的路径</span><br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        check_state = sm.found[<span class="hljs-number">0</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(check_state.posix.dumps(<span class="hljs-number">0</span>)))<br>        <span class="hljs-comment"># 打印解决方案</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)<br>        <span class="hljs-comment"># 如果没有找到解决方案，则抛出异常</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br></code></pre></td></tr></table></figure><h3 id="10-angr-simprocedures-hook-函数"><a href="#10-angr-simprocedures-hook-函数" class="headerlink" title="10_angr_simprocedures hook 函数"></a>10_angr_simprocedures hook 函数</h3><p>好多函数不能像上面上面写只能hook函数名称</p><p><code>check_equals_OSIWHBXIFOQVSBZB</code></p><p><img src="https://vip.helloimg.com/images/2023/10/07/ob5tu5.png" alt="image-20231007172258702"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br><br>    init_state = p.factory.entry_state()<br><br>    <span class="hljs-comment"># 定义一个自定义的SimProcedure类来处理符号执行的逻辑</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">mySimPro</span>(angr.SimProcedure):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, user_input_addr, user_input_length</span>):<br>            <span class="hljs-comment"># 从内存中加载用户输入的内容</span><br>            angr_bvs = self.state.memory.load(user_input_addr, user_input_length)<br>            desired = <span class="hljs-string">&quot;OSIWHBXIFOQVSBZB&quot;</span><br><br>            <span class="hljs-keyword">return</span> claripy.If(<br>                desired == angr_bvs,<br>                claripy.BVV(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>),  <span class="hljs-comment"># 如果用户输入等于目标字符串，返回1</span><br>                claripy.BVV(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>)   <span class="hljs-comment"># 否则返回0</span><br>            )<br><br>    check_symbol = <span class="hljs-string">&#x27;check_equals_OSIWHBXIFOQVSBZB&#x27;</span><br><br>    <span class="hljs-comment"># 将自定义的SimProcedure与指定的符号关联起来</span><br>    p.hook_symbol(check_symbol, mySimPro())<br><br>    sm = p.factory.simgr(init_state)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 对符号执行管理器进行探索，找到满足is_good条件且避免is_bad条件的路径</span><br>    sm.explore(find=is_good, avoid=is_bad)<br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        found_state = sm.found[<span class="hljs-number">0</span>]<br>        passwd = found_state.posix.dumps(<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br></code></pre></td></tr></table></figure><h3 id="11-angr-sim-scanf-scanf-hook"><a href="#11-angr-sim-scanf-scanf-hook" class="headerlink" title="11_angr_sim_scanf scanf hook"></a>11_angr_sim_scanf scanf hook</h3><p><img src="https://vip.helloimg.com/images/2023/10/07/ob5LOm.png" alt="image-20231007172515891"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    <span class="hljs-comment"># 从命令行参数获取二进制文件的路径</span><br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br><br>    <span class="hljs-comment"># 创建初始状态</span><br>    init_state = p.factory.entry_state()<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">mySimPro</span>(angr.SimProcedure):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self, string, scanf0_addr, scanf1_addr</span>):<br>            <span class="hljs-comment"># 创建两个符号变量用于存储用户输入</span><br>            scanf0 = claripy.BVS(<span class="hljs-string">&#x27;scanf0&#x27;</span>, <span class="hljs-number">32</span>)<br>            scanf1 = claripy.BVS(<span class="hljs-string">&#x27;scanf1&#x27;</span>, <span class="hljs-number">32</span>)<br><br>            <span class="hljs-comment"># 将符号变量存储到内存中</span><br>            self.state.memory.store(scanf0_addr, scanf0, endness=p.arch.memory_endness)<br>            self.state.memory.store(scanf1_addr, scanf1, endness=p.arch.memory_endness)<br><br>            <span class="hljs-comment"># 将符号变量保存到全局状态中，以便在后续的路径中可以访问</span><br>            self.state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;passwd0&#x27;</span>] = scanf0<br>            self.state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;passwd1&#x27;</span>] = scanf1<br><br>    scanf_symbol = <span class="hljs-string">&#x27;__isoc99_scanf&#x27;</span><br>    <span class="hljs-comment"># 钩子函数来替换原始的scanf函数</span><br>    p.hook_symbol(scanf_symbol, mySimPro())<br><br>    sm = p.factory.simgr(init_state)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 使用符号执行探索程序路径</span><br>    sm.explore(find=is_good, avoid=is_bad)<br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        found_state = sm.found[<span class="hljs-number">0</span>]<br>        pwd0 = found_state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;passwd0&#x27;</span>]<br>        pwd1 = found_state.<span class="hljs-built_in">globals</span>[<span class="hljs-string">&#x27;passwd1&#x27;</span>]<br><br>        <span class="hljs-comment"># 获取解决方案</span><br>        password0 = found_state.solver.<span class="hljs-built_in">eval</span>(pwd0)<br>        password1 = found_state.solver.<span class="hljs-built_in">eval</span>(pwd1)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(password0, password1))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br></code></pre></td></tr></table></figure><h3 id="12-angr-veritesting-优化路径"><a href="#12-angr-veritesting-优化路径" class="headerlink" title="12_angr_veritesting 优化路径"></a>12_angr_veritesting 优化路径</h3><p>对比前面增加</p><p>之前</p><p>​    <code>sm = p.factory.simgr(init_state)</code> </p><p>现在</p><p>&#96;&#96;    sm &#x3D; p.factory.simgr(init_state, veritesting&#x3D;True)  &#96; </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> claripy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]        <span class="hljs-comment"># 获取命令行参数中指定的二进制文件路径</span><br>    p = angr.Project(bin_path)   <span class="hljs-comment"># 创建angr项目对象</span><br><br>    init_state = p.factory.entry_state()   <span class="hljs-comment"># 创建初始状态</span><br>    sm = p.factory.simgr(init_state, veritesting=<span class="hljs-literal">True</span>)   <span class="hljs-comment"># 创建符号执行管理器</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>): <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    sm.explore(find=is_good, avoid=is_bad)   <span class="hljs-comment"># 开始符号执行过程，指定找到目标状态和要避免的状态</span><br><br>    <span class="hljs-keyword">if</span> sm.found:               <span class="hljs-comment"># 如果找到目标状态</span><br>        found_state = sm.found[<span class="hljs-number">0</span>]    <span class="hljs-comment"># 获取找到的状态</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(found_state.posix.dumps(<span class="hljs-number">0</span>)))   <span class="hljs-comment"># 打印解（状态的标准输入）</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)   <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv) <br><br></code></pre></td></tr></table></figure><h3 id="13-angr-static-binary-静态符号化"><a href="#13-angr-static-binary-静态符号化" class="headerlink" title="13_angr_static_binary 静态符号化"></a>13_angr_static_binary 静态符号化</h3><p>把相应的给地址给angr</p><p>如call printf 进入printf首地址</p><p><img src="https://vip.helloimg.com/images/2023/10/07/ob5MRT.png" alt="image-20231007172927800"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">argv</span>):<br>    bin_path = argv[<span class="hljs-number">1</span>]<br>    p = angr.Project(bin_path)<br><br>    init_state = p.factory.entry_state()<br><br>    <span class="hljs-comment"># 钩住printf、scanf、puts和__libc_start_main函数，以避免其影响我们的符号执行</span><br>    p.hook(<span class="hljs-number">0x804fab0</span>, angr.SIM_PROCEDURES[<span class="hljs-string">&#x27;libc&#x27;</span>][<span class="hljs-string">&#x27;printf&#x27;</span>]())<br>    p.hook(<span class="hljs-number">0x804fb10</span>, angr.SIM_PROCEDURES[<span class="hljs-string">&#x27;libc&#x27;</span>][<span class="hljs-string">&#x27;scanf&#x27;</span>]())<br>    p.hook(<span class="hljs-number">0x80503f0</span>, angr.SIM_PROCEDURES[<span class="hljs-string">&#x27;libc&#x27;</span>][<span class="hljs-string">&#x27;puts&#x27;</span>]())<br>    p.hook(<span class="hljs-number">0x8048d60</span>, angr.SIM_PROCEDURES[<span class="hljs-string">&#x27;glibc&#x27;</span>][<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]())<br><br>    sm = p.factory.simgr(init_state, veritesting=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 创建符号执行管理器,启用veritesting</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_good</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Good Job&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_bad</span>(<span class="hljs-params">state</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;Try again&#x27;</span> <span class="hljs-keyword">in</span> state.posix.dumps(<span class="hljs-number">1</span>)<br><br>    sm.explore(find=is_good, avoid=is_bad)<br><br>    <span class="hljs-keyword">if</span> sm.found:<br>        found_state = sm.found[<span class="hljs-number">0</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solution: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(found_state.posix.dumps(<span class="hljs-number">0</span>)))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;No Solution found&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main(sys.argv)<br></code></pre></td></tr></table></figure><p>题目来自GitHub：<a href="https://github.com/jakespringer/angr_ctf">点击下载angr_ctf题目</a></p><p>我的文件链接:<br><a href="https://pan.baidu.com/s/1mNExUpxts-NmkaMzVR__Hg?pwd=rshi">https://pan.baidu.com/s/1mNExUpxts-NmkaMzVR__Hg?pwd=rshi</a> 提取码: rshi 复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>参考b站up主<a href="https://space.bilibili.com/386563875">mr_m0nst3r</a></p>]]></content>
      
      
      <categories>
          
          <category> angr学习模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习angr </tag>
            
            <tag> angr符号化模板 </tag>
            
            <tag> python模块学习 </tag>
            
            <tag> pyhton_angr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云盘dll劫持</title>
      <link href="/2023/6c15a38d/"/>
      <url>/2023/6c15a38d/</url>
      
        <content type="html"><![CDATA[<h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><p><img src="https://www.helloimg.com/images/2023/10/03/oHmjGK.png" alt="image-20231003223638091"></p><p><img src="https://www.helloimg.com/images/2023/10/03/oHmYbT.png" alt="image-20231003223531216"></p><p>文件是阿里云盘启动软件<code>aDrive.exe</code> 文件为32位版本<code>10.1118</code></p><p>把<code>aDrive.exe</code>单独提取到一个新的目录下，然后开启 <code>procmon64.exe</code></p><p><img src="https://www.helloimg.com/images/2023/10/03/oHsEOM.png" alt="image-20231003224306031"></p><p><img src="https://www.helloimg.com/images/2023/10/03/oHss16.png" alt="image-20231003224354251"></p><p>添加筛选条件这样好找✌️</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs procmon">Process Name -&gt; is -&gt;==  aDrive.exe<br><br>Result -&gt; is -&gt; == NAME NOT FOUND<br><br>Path -&gt; contains -&gt; == DLL<br></code></pre></td></tr></table></figure><p>然后双击该exe，他也许什么也不会发生，这是因为他缺少某些dll跑不起来。在procmon中可以看到它加载了哪些dll，并且是出于未找到的状态</p><p> <img src="https://www.helloimg.com/images/2023/10/03/oHs46R.png" alt="image-20231003224844428"></p><p>得到<code>aDrive.exe</code>会在当前文件内寻找<code>ffmpeg.dll</code>文件</p><p>让后vs编写一个calc动态dll</p><p>在dllmain.cpp下写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br>STARTUPINFO si = &#123; <span class="hljs-number">0</span> &#125;;<br>PROCESS_INFORMATION pi = &#123; <span class="hljs-number">0</span> &#125;;<br><br>BOOL APIENTRY <span class="hljs-title function_">DllMain</span><span class="hljs-params">( HMODULE hModule,</span><br><span class="hljs-params">                       DWORD  ul_reason_for_call,</span><br><span class="hljs-params">                       LPVOID lpReserved</span><br><span class="hljs-params">                     )</span><br>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        CreateProcessA(<span class="hljs-literal">NULL</span>, <br>            (LPSTR)<span class="hljs-string">&quot;calc.exe&quot;</span>,<br>            <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE,<br>            <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>,<br>            (LPSTARTUPINFOA)&amp;si,<br>            (LPPROCESS_INFORMATION)&amp;pi<br>        );<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><p>将生成的<code>ffmpeg.dll</code>放在<code>aDrive.exe</code> 发现 报错</p><p><img src="https://www.helloimg.com/images/2023/10/03/oHsSLA.png" alt="image-20231003225452638"></p><p>我们还可以通过<code>dumpbin</code>或者其他pe工具查看当前程序的导入表</p><p><img src="https://www.helloimg.com/images/2023/10/03/oHsiQ5.png" alt="image-20231003225558186"></p><p>得到ffmpeg.dll的导入表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs dll">ffmpeg.dll<br>               81851C4 Import Address Table<br>               818478C Import Name Table<br>                     0 time date stamp<br>                     0 Index of first forwarder reference<br><br>                    0 av_buffer_create<br>                    0 av_buffer_get_opaque<br>                    0 av_dict_get<br>                    0 av_dict_set<br>                    0 av_frame_alloc<br>                    0 av_frame_free<br>                    0 av_frame_unref<br>                    0 av_free<br>                    0 av_get_bytes_per_sample<br>                    0 av_get_cpu_flags<br>                    0 av_image_check_size<br>                    0 av_log_set_level<br>                    0 av_malloc<br>                    0 av_max_alloc<br>                    0 av_new_packet<br>                    0 av_packet_alloc<br>                    0 av_packet_copy_props<br>                    0 av_packet_free<br>                    0 av_packet_get_side_data<br>                    0 av_packet_unref<br>                    0 av_read_frame<br>                    0 av_rescale_q<br>                    0 av_samples_get_buffer_size<br>                    0 av_seek_frame<br>                    0 av_stream_get_first_dts<br>                    0 av_stream_get_side_data<br>                    0 av_strerror<br>                    0 avcodec_align_dimensions<br>                    0 avcodec_alloc_context3<br>                    0 avcodec_descriptor_get<br>                    0 avcodec_find_decoder<br>                    0 avcodec_flush_buffers<br>                    0 avcodec_free_context<br>                    0 avcodec_open2<br>                    0 avcodec_parameters_to_context<br>                    0 avcodec_receive_frame<br>                    0 avcodec_send_packet<br>                    0 avformat_alloc_context<br>                    0 avformat_close_input<br>                    0 avformat_find_stream_info<br>                    0 avformat_free_context<br>                    0 avformat_open_input<br>                    0 avio_alloc_context<br></code></pre></td></tr></table></figure><p>有点多使用python写个小脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 待生成的函数名称列表</span><br>function_names = [<br>    <span class="hljs-string">&quot;av_buffer_create&quot;</span>,<br>    <span class="hljs-string">&quot;av_buffer_get_opaque&quot;</span>,<br>    <span class="hljs-string">&quot;av_dict_get&quot;</span>,<br>    <span class="hljs-string">&quot;av_dict_set&quot;</span>,<br>    <span class="hljs-string">&quot;av_frame_alloc&quot;</span>,<br>    <span class="hljs-string">&quot;av_frame_free&quot;</span>,<br>    <span class="hljs-string">&quot;av_frame_unref&quot;</span>,<br>    <span class="hljs-string">&quot;av_free&quot;</span>,<br>    <span class="hljs-string">&quot;av_get_bytes_per_sample&quot;</span>,<br>    <span class="hljs-string">&quot;av_get_cpu_flags&quot;</span>,<br>    <span class="hljs-string">&quot;av_image_check_size&quot;</span>,<br>    <span class="hljs-string">&quot;av_log_set_level&quot;</span>,<br>    <span class="hljs-string">&quot;av_malloc&quot;</span>,<br>    <span class="hljs-string">&quot;av_max_alloc&quot;</span>,<br>    <span class="hljs-string">&quot;av_new_packet&quot;</span>,<br>    <span class="hljs-string">&quot;av_packet_alloc&quot;</span>,<br>    <span class="hljs-string">&quot;av_packet_copy_props&quot;</span>,<br>    <span class="hljs-string">&quot;av_packet_free&quot;</span>,<br>    <span class="hljs-string">&quot;av_packet_get_side_data&quot;</span>,<br>    <span class="hljs-string">&quot;av_packet_unref&quot;</span>,<br>    <span class="hljs-string">&quot;av_read_frame&quot;</span>,<br>    <span class="hljs-string">&quot;av_rescale_q&quot;</span>,<br>    <span class="hljs-string">&quot;av_samples_get_buffer_size&quot;</span>,<br>    <span class="hljs-string">&quot;av_seek_frame&quot;</span>,<br>    <span class="hljs-string">&quot;av_stream_get_first_dts&quot;</span>,<br>    <span class="hljs-string">&quot;av_stream_get_side_data&quot;</span>,<br>    <span class="hljs-string">&quot;av_strerror&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_align_dimensions&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_alloc_context3&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_descriptor_get&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_find_decoder&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_flush_buffers&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_free_context&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_open2&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_parameters_to_context&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_receive_frame&quot;</span>,<br>    <span class="hljs-string">&quot;avcodec_send_packet&quot;</span>,<br>    <span class="hljs-string">&quot;avformat_alloc_context&quot;</span>,<br>    <span class="hljs-string">&quot;avformat_close_input&quot;</span>,<br>    <span class="hljs-string">&quot;avformat_find_stream_info&quot;</span>,<br>    <span class="hljs-string">&quot;avformat_free_context&quot;</span>,<br>    <span class="hljs-string">&quot;avformat_open_input&quot;</span>,<br>    <span class="hljs-string">&quot;avio_alloc_context&quot;</span>,<br>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;START \n&quot;</span>)<br><span class="hljs-keyword">for</span> fn <span class="hljs-keyword">in</span> function_names:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;extern &quot;C&quot; __declspec(dllexport) int <span class="hljs-subst">&#123;fn&#125;</span>()\n&#123;&#123;\n    return 0;\n&#125;&#125;&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done!&quot;</span>)<br></code></pre></td></tr></table></figure><p>想劫持的是 ffmpeg.dll ,可以编写如下poc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_buffer_create</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_buffer_get_opaque</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_dict_get</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_dict_set</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_frame_alloc</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_frame_free</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_frame_unref</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_free</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_get_bytes_per_sample</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_get_cpu_flags</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_image_check_size</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_log_set_level</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_malloc</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_max_alloc</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_new_packet</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_packet_alloc</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_packet_copy_props</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_packet_free</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_packet_get_side_data</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_packet_unref</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_read_frame</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_rescale_q</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_samples_get_buffer_size</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_seek_frame</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_stream_get_first_dts</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_stream_get_side_data</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">av_strerror</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_align_dimensions</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_alloc_context3</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_descriptor_get</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_find_decoder</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_flush_buffers</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_free_context</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_open2</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_parameters_to_context</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_receive_frame</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avcodec_send_packet</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avformat_alloc_context</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avformat_close_input</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avformat_find_stream_info</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avformat_free_context</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avformat_open_input</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-type">int</span> <span class="hljs-title function_">avio_alloc_context</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br>STARTUPINFO si = &#123; <span class="hljs-number">0</span> &#125;;<br>PROCESS_INFORMATION pi = &#123; <span class="hljs-number">0</span> &#125;;<br><br>BOOL APIENTRY <span class="hljs-title function_">DllMain</span><span class="hljs-params">( HMODULE hModule,</span><br><span class="hljs-params">                       DWORD  ul_reason_for_call,</span><br><span class="hljs-params">                       LPVOID lpReserved</span><br><span class="hljs-params">                     )</span><br>&#123;<br>    <span class="hljs-keyword">switch</span> (ul_reason_for_call)<br>    &#123;<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH:<br>        CreateProcessA(<span class="hljs-literal">NULL</span>, <br>            (LPSTR)<span class="hljs-string">&quot;calc.exe&quot;</span>,<br>            <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, FALSE,<br>            <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>,<br>            (LPSTARTUPINFOA)&amp;si,<br>            (LPPROCESS_INFORMATION)&amp;pi<br>        );<br>    <span class="hljs-keyword">case</span> DLL_THREAD_ATTACH:<br>    <span class="hljs-keyword">case</span> DLL_THREAD_DETACH:<br>    <span class="hljs-keyword">case</span> DLL_PROCESS_DETACH:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>如果要执行一些功能，只需要将功能写在dll代码中。</p><p>测试成功弹出计算器😊😊😊</p><p><img src="https://www.helloimg.com/images/2023/10/03/oHsnu0.png" alt="image-20231003230116778"></p>]]></content>
      
      
      <categories>
          
          <category> dll注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云盘 </tag>
            
            <tag> 注入dll </tag>
            
            <tag> Dll Hijacking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ida_pro快捷键</title>
      <link href="/2023/27753/"/>
      <url>/2023/27753/</url>
      
        <content type="html"><![CDATA[<h3 id="ida常用快捷键"><a href="#ida常用快捷键" class="headerlink" title="ida常用快捷键"></a>ida常用快捷键</h3><p>下面的是Win的快捷键，如果mac 可用Control代替Ctrl，Option代替Alt，祝大家中秋、国庆双节快乐。</p><p><img src="https://www.helloimg.com/images/2023/10/03/oHPZJv.png" alt="idapro快捷键"></p>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idapro </tag>
            
            <tag> ida </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Fluid</title>
      <link href="/2023/7d1a424a/"/>
      <url>/2023/7d1a424a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎体验 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作，本篇文章可预览主题的样式及功能。</p></blockquote><span id="more"></span><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p>文章大部分使用的是 github-markdown 样式，并加入了一些 Material 风格。</p><h3 id="H3-标题"><a href="#H3-标题" class="headerlink" title="H3 标题"></a>H3 标题</h3><h4 id="H4-标题"><a href="#H4-标题" class="headerlink" title="H4 标题"></a>H4 标题</h4><p><strong>粗体</strong></p><p><em>斜体</em></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>行内代码：<code>$ hexo new post &quot;My New Post&quot;</code></p><p>代码高亮使用的是 highlight.js，支持 185 种语言和 91 种高亮样式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib</span>(<span class="hljs-params">n</span>):<br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> a &lt; n:<br>        <span class="hljs-built_in">print</span>(a, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        a, b = b, a+b<br>    <span class="hljs-built_in">print</span>()<br>fib(<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Map <span class="hljs-keyword">struct</span> &#123;<br>    mu Mutex<br>    read atomic.Value<br>    dirty <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry<br>    misses <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th align="left">Left</th><th align="center">Center</th><th align="right">Right</th></tr></thead><tbody><tr><td align="left">Key 1</td><td align="center">Value 1</td><td align="right">Comment 1</td></tr><tr><td align="left">Key 2</td><td align="center">Value 2</td><td align="right">Comment 2</td></tr><tr><td align="left">Key 3</td><td align="center">Value 3</td><td align="right">Comment 3</td></tr></tbody></table><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Fluid 相较于其他主题的优势：</p><ol><li>设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；</li><li>提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；</li><li>响应式页面，适配手机、平板等设备；</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Fluid 功能特性：</p><ul><li>无比详实的<a href="https://hexo.fluid-dev.com/docs/">用户文档</a></li><li>页面组件懒加载</li><li>多种代码高亮方案</li><li>多语言配置</li><li>内置多款评论插件</li><li>内置网页访问统计</li><li>内置文章本地搜索</li><li>支持暗色模式</li><li>支持脚注语法</li><li>支持 LaTeX 数学公式</li><li>支持 mermaid 流程图</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://fluid.s3.bitiful.net/bg/post.png?w=1280&fmt=webp" alt="这是图片描述"></p><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><p>基于 MathJax 引擎：</p><p>$$<br>\Gamma _ { \epsilon } ( x ) &#x3D; [ 1- e ^ { - 2\pi \epsilon } ] ^ { 1- x } \prod _ { n &#x3D; 0} ^ { \infty } \frac { 1- \operatorname{exp} ( - 2\pi \epsilon ( n + 1) ) } { 1- \operatorname{exp} ( - 2\pi \epsilon ( x + n ) ) }<br>$$</p><p>$$<br>\left( \begin{array} c t ^ { \prime } \ x ^ { \prime } \ y ^ { \prime } \ z ^ { \prime } \end{array} \right) &#x3D; \left( \begin{array} { c c c c } { \gamma } &amp; { - \gamma \beta } &amp; { 0 } &amp; { 0 } \ { - \gamma \beta } &amp; { \gamma } &amp; { 0 } &amp; { 0 } \ { 0 } &amp; { 0 } &amp; { 1 } &amp; { 0 } \ { 0 } &amp; { 0 } &amp; { 0 } &amp; { 1 } \end{array} \right) \left( \begin{array} c t \ x \ y \ z \end{array} \right)<br>$$</p><p>$$<br>6 \mathrm { CO } _ { 2 } + 6 \mathrm { H } _ { 2 } \mathrm { O } \rightarrow \mathrm { C } _ { 6 } \mathrm { H } _ { 12 } \mathrm { O } _ { 6 } + 6 \mathrm { O } _ { 2 }<br>$$</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>基于 mermaid 语法：</p><pre><code class=" mermaid">sequenceDiagramparticipant Aliceparticipant BobAlice-&gt;&gt;John: Hello John, how are you?loop Healthcheck    John-&gt;&gt;John: Fight against hypochondriaendNote right of John: Rational thoughts &lt;br/&gt;prevail...John--&gt;&gt;Alice: Great!John-&gt;&gt;Bob: How about you?Bob--&gt;&gt;John: Jolly good!</code></pre><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h2 id="内置-Tag-插件"><a href="#内置-Tag-插件" class="headerlink" title="内置 Tag 插件"></a>内置 Tag 插件</h2><p>内置了一些 Tag 插件，用于实现 Markdown 不容易生成的样式，具体使用方式请见 <a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">用户指南</a>。</p><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><div class="note note-primary">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><div class="note note-warning">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><div class="note note-danger">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><span class="label label-primary">行内标签</span> <span class="label label-warning">行内标签</span> <span class="label label-danger">行内标签</span><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><div>            <input type="checkbox" disabled checked="checked">内置插件，主要是解决一些 Renderer 不支持勾选          </div><div>            <input type="checkbox"  checked="checked">内置插件，主要是解决一些 Renderer 不支持勾选          </div><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><a class="btn" href="javascript:;"  target="_blank">支持链接</a><h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://fluid.s3.bitiful.net/hello-fluid/cover.png?w=480&fmt=webp" alt="图1"></div><div class="group-image-wrap"><img src="https://fluid.s3.bitiful.net/hello-fluid/cover.png?w=480&fmt=webp" alt="图2"></div><div class="group-image-wrap"><img src="https://fluid.s3.bitiful.net/hello-fluid/cover.png?w=480&fmt=webp" alt="图3"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://fluid.s3.bitiful.net/hello-fluid/cover.png?w=480&fmt=webp" alt="图4"></div><div class="group-image-wrap"><img src="https://fluid.s3.bitiful.net/hello-fluid/cover.png?w=480&fmt=webp" alt="图5"></div></div></div><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>以下是脚注演示<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注演示">[1]</span></a></sup>：</p><p>如果你有 Fluid 主题或 Hexo 博客相关的文章，可以通过 Pull Request 方式投稿<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="投稿具体详见[https://github.com/fluid-dev/hexo-fluid-blog](https://github.com/fluid-dev/hexo-fluid-blog)">[2]</span></a></sup>。</p><p>文章来自：<a href="https://hexo.fluid-dev.com/posts/hello-fluid/">https://hexo.fluid-dev.com/posts/hello-fluid/</a></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注演示<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>投稿具体详见<a href="https://github.com/fluid-dev/hexo-fluid-blog">https://github.com/fluid-dev/hexo-fluid-blog</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      <categories>
          
          <category> 主题示例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> Fluid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10配置双机调试</title>
      <link href="/2023/22870/"/>
      <url>/2023/22870/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建Windows-10-双机调试"><a href="#搭建Windows-10-双机调试" class="headerlink" title="搭建Windows 10 双机调试"></a>搭建Windows 10 双机调试</h2><p>首先安装号Windows 10 系统</p><p>管理员方式运行cmd</p><h3 id="依次输入"><a href="#依次输入" class="headerlink" title="依次输入"></a>依次输入</h3><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271609493.png" alt="image-20230927160914453"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">//添加开机引导项<br>bcdedit /<span class="hljs-built_in">copy</span> &#123;current&#125; /d Debug<br><br>//设置引导项时间<br><br>bcdedit /timeout <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>让后使用Windows自动的重启不要使用VMware 重启</p><p>重启后依次输入</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271612085.png" alt="image-20230927161238980"></p><p>依次输入管理员cmd</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271621291.png" alt="image-20230927162105237"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CMD">bcdedit /dbgsettings SERIAL DEBUGPORT:<span class="hljs-number">1</span> BAUDRATE:<span class="hljs-number">115200</span><br><br>bcdedit /bootDebug ON<br><br>bcdedit /Debug ON<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271622813.png" alt="image-20230927162227741"></p><p>检查一下配置</p><p>让后win加q 搜索config 系统配置</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271641738.png" alt="image-20230927164106700"></p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271706058.png" alt="image-20230927170628995"></p><h3 id="WINDBG-配置"><a href="#WINDBG-配置" class="headerlink" title="WINDBG 配置"></a>WINDBG 配置</h3><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271708153.png" alt="image-20230927170825091"></p><h3 id="配置符号表"><a href="#配置符号表" class="headerlink" title="配置符号表"></a>配置符号表</h3><p><code>SRV*d:\MySymbol*http://msdl.microsoft.com/download/symbols</code><br><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271709232.png" alt="image-20230927170940171"></p><h3 id="配置调试器"><a href="#配置调试器" class="headerlink" title="配置调试器"></a>配置调试器</h3><p>点击文件</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271711027.png" alt="image-20230927171148969"></p><p>单机attach to kernel</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271712976.png" alt="image-20230927171206924"></p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309271720112.png" alt="image-20230927172002061"></p><h3 id="测试peb"><a href="#测试peb" class="headerlink" title="测试peb"></a>测试peb</h3><p><code>!process 0 0</code></p><p><code>!IDT</code></p><p><code>.reload</code></p><p>完结撒花</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 双机调试 </tag>
            
            <tag> Windows 10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iscc2023_reversewp</title>
      <link href="/2023/59627/"/>
      <url>/2023/59627/</url>
      
        <content type="html"><![CDATA[<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="easyctf2"><a href="#easyctf2" class="headerlink" title="easyctf2"></a>easyctf2</h2><p>安卓apk 打开看 <img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/1689324797033-28a5dd2e-5189-4fab-ba58-466de2c00f47.png" alt="image.png" title="image.png"> jeb 反编译找到MainActivity</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/1689325011698-58504440-b50d-4498-a278-ac741b640b0d.png" alt="image.png" title="image.png"> 进入zzsence方法 <img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/1689325182959-bf21af08-cb40-4b08-af85-028e2966758c.png" alt="image.png" title="image.png"> <img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/1689325464329-d9a46a53-6493-4b5f-a3e0-d8a0161e2e0e.png" alt="image.png" title="image.png"> 编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><br><span class="hljs-comment"># 密文</span><br>ciphertext = <span class="hljs-built_in">bytes</span>(x &amp; <span class="hljs-number">0xFF</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span>  [<span class="hljs-number">0x7F</span>, <span class="hljs-number">41</span>, <span class="hljs-number">0x20</span>, -<span class="hljs-number">23</span>, <span class="hljs-number">53</span>, <span class="hljs-number">0xFFFFFF8F</span>, -<span class="hljs-number">59</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">5</span>, <span class="hljs-number">16</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">91</span>, <span class="hljs-number">150</span>, <span class="hljs-number">43</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">140</span>, <span class="hljs-number">170</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">36</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">140</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">200</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">78</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xF7</span>])<br><span class="hljs-comment"># # 密钥</span><br>key = <span class="hljs-built_in">bytes</span>(x &amp; <span class="hljs-number">0xFF</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span>  [-<span class="hljs-number">95</span>,<span class="hljs-number">109</span>,<span class="hljs-number">22</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">26</span>,-<span class="hljs-number">6</span>,<span class="hljs-number">48</span>,<span class="hljs-number">95</span>,-<span class="hljs-number">41</span>,<span class="hljs-number">126</span>,<span class="hljs-number">94</span>,-<span class="hljs-number">98</span>,-<span class="hljs-number">20</span>,<span class="hljs-number">107</span>,-<span class="hljs-number">97</span>,-<span class="hljs-number">35</span>])<br><span class="hljs-comment"># 偏移iv</span><br>iv = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">16</span>,<span class="hljs-number">18</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>,<span class="hljs-number">24</span>,<span class="hljs-number">26</span>,<span class="hljs-number">28</span>,<span class="hljs-number">30</span>])<br><span class="hljs-comment"># 创建AES解密器</span><br>cipher = AES.new(key, AES.MODE_CBC, iv)<br><span class="hljs-comment"># 解密密文并删除填充</span><br>plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-built_in">print</span>(plaintext)<br><br><span class="hljs-comment">#flag&#123;jsdg632t12&#125;</span><br></code></pre></td></tr></table></figure><h2 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h2><p>使用c# 工具反编译出</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// CrackmeApp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</span><br><span class="hljs-comment">// CrackmeApp.Form1</span><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.ComponentModel;<br><span class="hljs-keyword">using</span> System.Drawing;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><span class="hljs-keyword">using</span> CrackmeApp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Form1</span> : <span class="hljs-title">Form</span><br>&#123;<br><span class="hljs-keyword">private</span> IContainer components;<br><br><span class="hljs-keyword">private</span> Button button1;<br><br><span class="hljs-keyword">private</span> TextBox textBox1;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Form1</span>()</span><br>&#123;<br>InitializeComponent();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br><span class="hljs-built_in">int</span> a_ = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">10</span>] &#123; <span class="hljs-number">123</span>, <span class="hljs-number">148</span>, <span class="hljs-number">62</span>, <span class="hljs-number">53</span>, <span class="hljs-number">24</span>, <span class="hljs-number">116</span>, <span class="hljs-number">244</span>, <span class="hljs-number">126</span>, <span class="hljs-number">63</span>, <span class="hljs-number">90</span> &#125;;<br><span class="hljs-built_in">string</span> text = ((TextBox)<span class="hljs-keyword">base</span>.Controls.Find(Form1.b(<span class="hljs-string">&quot;戕紗戙栛尝伟娡ᔣ&quot;</span>, a_), searchAllChildren: <span class="hljs-literal">false</span>)[<span class="hljs-number">0</span>]).Text;<br><span class="hljs-built_in">int</span>[] array2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">int</span>[] array3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">if</span> (text.Length == <span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; text.Length; i++)<br>&#123;<br>array2[i] = text[i];<br><span class="hljs-built_in">byte</span> b = (<span class="hljs-built_in">byte</span>)((<span class="hljs-built_in">uint</span>)array2[i] &amp; <span class="hljs-number">7u</span>);<br><span class="hljs-built_in">byte</span> b2 = (<span class="hljs-built_in">byte</span>)((<span class="hljs-built_in">uint</span>)(array2[i] &gt;&gt; <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0xFF</span>u);<br>array3[i] = (b &lt;&lt; <span class="hljs-number">5</span>) | b2;<br>array3[i] ^= <span class="hljs-number">18</span>;<br><span class="hljs-keyword">if</span> (array3[i] != array[i])<br>&#123;<br>MessageBox.Show(Form1.b(<span class="hljs-string">&quot;䄕樗甙爛礝ğ&quot;</span>, a_));<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>MessageBox.Show(Form1.b(<span class="hljs-string">&quot;䔕洗礙缛笝匟儡ԣ&quot;</span>, a_));<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>MessageBox.Show(Form1.b(<span class="hljs-string">&quot;䄕樗甙爛礝ğ&quot;</span>, a_));<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> disposing</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span> (disposing &amp;&amp; components != <span class="hljs-literal">null</span>)<br>&#123;<br>components.Dispose();<br>&#125;<br><span class="hljs-keyword">base</span>.Dispose(disposing);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitializeComponent</span>()</span><br>&#123;<br><span class="hljs-built_in">int</span> a_ = <span class="hljs-number">9</span>;<br><span class="hljs-keyword">this</span>.button1 = <span class="hljs-keyword">new</span> System.Windows.Forms.Button();<br><span class="hljs-keyword">this</span>.textBox1 = <span class="hljs-keyword">new</span> System.Windows.Forms.TextBox();<br><span class="hljs-keyword">base</span>.SuspendLayout();<br><span class="hljs-keyword">this</span>.button1.Location = <span class="hljs-keyword">new</span> System.Drawing.Point(<span class="hljs-number">88</span>, <span class="hljs-number">163</span>);<br><span class="hljs-keyword">this</span>.button1.Name = CrackmeApp.Form1.b(<span class="hljs-string">&quot;缜樞唠圢䨤䤦ᠨ&quot;</span>, a_);<br><span class="hljs-keyword">this</span>.button1.Size = <span class="hljs-keyword">new</span> System.Drawing.Size(<span class="hljs-number">110</span>, <span class="hljs-number">27</span>);<br><span class="hljs-keyword">this</span>.button1.TabIndex = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">this</span>.button1.Text = CrackmeApp.Form1.b(<span class="hljs-string">&quot;帜猞䠠䀢两樦䰨&quot;</span>, a_);<br><span class="hljs-keyword">this</span>.button1.UseVisualStyleBackColor = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">this</span>.button1.Click += <span class="hljs-keyword">new</span> System.EventHandler(button1_Click);<br><span class="hljs-keyword">this</span>.textBox1.Location = <span class="hljs-keyword">new</span> System.Drawing.Point(<span class="hljs-number">56</span>, <span class="hljs-number">67</span>);<br><span class="hljs-keyword">this</span>.textBox1.Name = CrackmeApp.Form1.b(<span class="hljs-string">&quot;検稞夠圢朤䠦儨ᨪ&quot;</span>, a_);<br><span class="hljs-keyword">this</span>.textBox1.Size = <span class="hljs-keyword">new</span> System.Drawing.Size(<span class="hljs-number">184</span>, <span class="hljs-number">21</span>);<br><span class="hljs-keyword">this</span>.textBox1.TabIndex = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">base</span>.ClientSize = <span class="hljs-keyword">new</span> System.Drawing.Size(<span class="hljs-number">284</span>, <span class="hljs-number">262</span>);<br><span class="hljs-keyword">base</span>.Controls.Add(<span class="hljs-keyword">this</span>.textBox1);<br><span class="hljs-keyword">base</span>.Controls.Add(<span class="hljs-keyword">this</span>.button1);<br><span class="hljs-keyword">base</span>.Name = CrackmeApp.Form1.b(<span class="hljs-string">&quot;嬜瀞匠丢ᐤ&quot;</span>, a_);<br><span class="hljs-keyword">this</span>.Text = CrackmeApp.Form1.b(<span class="hljs-string">&quot;帜洞䀠䀢两樦䰨&quot;</span>, a_);<br><span class="hljs-keyword">base</span>.ResumeLayout(<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">base</span>.PerformLayout();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">internal</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">b</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> A_0, <span class="hljs-built_in">int</span> A_1</span>)</span><br>&#123;<br><span class="hljs-built_in">char</span>[] array = A_0.ToCharArray();<br><span class="hljs-built_in">int</span> num = <span class="hljs-number">320078560</span> + A_1 + <span class="hljs-number">51</span>;<br><span class="hljs-built_in">int</span> num2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (num2 &gt;= <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">goto</span> IL_001a;<br>&#125;<br><span class="hljs-keyword">goto</span> IL_004d;<br>IL_004d:<br><span class="hljs-keyword">if</span> (num2 &gt;= array.Length)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.Intern(<span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(array));<br>&#125;<br><span class="hljs-keyword">goto</span> IL_001a;<br>IL_001a:<br><span class="hljs-built_in">int</span> num3 = num2;<br><span class="hljs-built_in">char</span> num4 = array[num3];<br><span class="hljs-built_in">byte</span> b = (<span class="hljs-built_in">byte</span>)((num4 &amp; <span class="hljs-number">0xFF</span>u) ^ (<span class="hljs-built_in">uint</span>)num++);<br><span class="hljs-built_in">byte</span> b2 = (<span class="hljs-built_in">byte</span>)(((<span class="hljs-built_in">int</span>)num4 &gt;&gt; <span class="hljs-number">8</span>) ^ num++);<br><span class="hljs-built_in">byte</span> num5 = b2;<br>b2 = b;<br>b = num5;<br>array[num3] = (<span class="hljs-built_in">char</span>)((b2 &lt;&lt; <span class="hljs-number">8</span>) | b);<br>num2++;<br><span class="hljs-keyword">goto</span> IL_004d;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>python z3 模块一键梭哈</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">from</span> z3 import *<br><br>arr3 = [x ^ <span class="hljs-number">18</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">123</span>, <span class="hljs-number">148</span>, <span class="hljs-number">62</span>, <span class="hljs-number">53</span>, <span class="hljs-number">24</span>, <span class="hljs-number">116</span>, <span class="hljs-number">244</span>, <span class="hljs-number">126</span>, <span class="hljs-number">63</span>, <span class="hljs-number">90</span>]]<br><br>s = Solver()<br>flag_value = [BitVec((<span class="hljs-string">&quot;%d&quot;</span> % i), <span class="hljs-number">8</span>) <span class="hljs-function"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title">range</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)]  # <span class="hljs-title">range</span>(<span class="hljs-params"><span class="hljs-number">32</span></span>) 是 flag_value 长度</span><br><span class="hljs-function"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title">range</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>):</span><br><span class="hljs-function">    s.<span class="hljs-title">add</span>(<span class="hljs-params">(((flag_value[i] &amp; <span class="hljs-number">7</span></span>) &lt;&lt; 5) | (<span class="hljs-params">(flag_value[i] &gt;&gt; <span class="hljs-number">3</span></span>) &amp; 255))</span> == arr3[i])<br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> s.check() == sat:<br>    model = s.model()<br>    sorted_keys = sorted(model, key=lambda x: <span class="hljs-built_in">int</span>(x.name()))<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> sorted_keys:<br>        <span class="hljs-keyword">value</span> = model[key].as_long()<br>        flag += chr(<span class="hljs-keyword">value</span>)<br>        <span class="hljs-built_in">char</span> = chr(<span class="hljs-keyword">value</span>)<br>        print(f<span class="hljs-string">&quot;&#123;key&#125; = &#123;char&#125;&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;No solution&quot;</span>)<br>print(<span class="hljs-string">&quot;\n[+]--&gt;\t\t&quot;</span> + flag, end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-meta">#[+] flag--&gt;&gt; K4a9P37ciB</span><br></code></pre></td></tr></table></figure><h2 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h2><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/1688781084572-c47b1ad7-c085-4321-858e-b628ef7bc339.png" alt="image.png" title="image.png"> 一段 key 和enc[abi:cxx11] 进行判断</p><p><code>enc[abi:cxx11], &quot;#!&#39;&quot;&#39;&#39;%+-&amp;##&quot;&amp;&#39;.&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/1688783364243-97e53af0-5feb-4e15-8bf1-a530060120e3.png" alt="image.png" title="image.png"> <img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/1688783432060-2cd86dcf-14e7-4f36-87a8-2fd66ab684b8.png" alt="image.png" title="image.png"> 加密逻辑 z3 一把梭哈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>arr3 = [<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>,<span class="hljs-number">18</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">22</span>,<span class="hljs-number">18</span>,<span class="hljs-number">17</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">18</span>,<span class="hljs-number">24</span>]<br><br>arr1  = [<span class="hljs-number">0x23</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x2E</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(arr1))<br>s = Solver()<br>flag_value = [BitVec((<span class="hljs-string">&quot;%d&quot;</span> % i), <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]  <span class="hljs-comment"># range(32) 是 flag_value 长度</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    s.add(((flag_value[i] ^ arr3[i] )) == arr1[i])<br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> s.check() == sat:<br>    model = s.model()<br>    sorted_keys = <span class="hljs-built_in">sorted</span>(model, key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x.name()))<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> sorted_keys:<br>        value = model[key].as_long()<br>        flag += <span class="hljs-built_in">chr</span>(value)<br>        char = <span class="hljs-built_in">chr</span>(value)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span> = <span class="hljs-subst">&#123;char&#125;</span>&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No solution&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[+]--&gt;\t\t&quot;</span> + flag, end=<span class="hljs-string">&quot;&quot;</span>)<br><br><br><br><span class="hljs-comment">#[+]--&gt; flag 1234567890123456</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/1688783517564-e42507ad-1f90-40f0-b88d-3709549c18ab.png" alt="image.png" title="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Reverse_wp iscc_2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 逆向wp </tag>
            
            <tag> reverse </tag>
            
            <tag> iscc_2023 </tag>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf&amp;&amp;RE&amp;&amp;前12道题</title>
      <link href="/2023/31421/"/>
      <url>/2023/31421/</url>
      
        <content type="html"><![CDATA[<h1 id="buuctf-RE-前12道题"><a href="#buuctf-RE-前12道题" class="headerlink" title="buuctf&amp;&amp;RE&amp;&amp;前12道题"></a>buuctf&amp;&amp;RE&amp;&amp;前12道题</h1><p>本文章用到的工具</p><p>die下载地址 ：<a href="https://github.com/horsicq/DIE-engine/releases">https://github.com/horsicq/DIE-engine/releases</a></p><p>exeinfo下载地址 ： <a href="https://github.com/ExeinfoASL/ASL/blob/master/exeinfope.zip">https://github.com/ExeinfoASL/ASL/blob/master/exeinfope.zip</a></p><p>idapro下载地址：<a href="https://www.123pan.com/s/mCY8Vv-q4hWd.html">https://www.123pan.com/s/mCY8Vv-q4hWd.html</a><br>            提取码:HUA0</p><p>jadx-gui 下载地址 <a href="https://github.com/skylot/jadx/releases/tag/v1.4.6">https://github.com/skylot/jadx/releases/tag/v1.4.6</a></p><p>apkidc下载地址：<a href="https://down.52pojie.cn/?query=apkid">https://down.52pojie.cn/?query=apkid</a></p><p>仅用于学习</p><h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p>用die分析一下</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220623153705178.png" alt="image-20220623153705178"></p><p>使用ida64打开easyre.exe</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220623154005125.png" alt="image-20220623154005125"></p><h2 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h2><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220623154250990.png" alt="image-20220623154250990"></p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220623154343804.png" alt="image-20220623154343804"></p><p>shift+f12</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220623154505781.png" alt="image-20220623154505781"></p><p>异或</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220623154611201.png" alt="image-20220623154611201"></p><p>双击进入</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220623154755679.png" alt="image-20220623154755679"></p><p>可以看到 lea 取 rcx str2 为 {hello_world}</p><p>让后f5反编译查看伪代码</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624093942025.png" alt="image-20220624093942025"></p><p>将：{hello_world}</p><p>替换o为0</p><h2 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h2><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624094219719.png" alt="image-20220624094219719"></p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624094330853.png" alt="image-20220624094330853"></p><p>直接f5反编译</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624094434960.png" alt="image-20220624094434960"></p><p>让后shift+f12</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624094808804.png" alt="image-20220624094808804"></p><p>暂时存储一下</p><p>将 eax 取内存 {hacking_for_fun}</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624094942907.png" alt="image-20220624094942907"></p><p>返回看到</p><p>eax, byte ptr flag[rax]</p><p>回到刚刚反编译的伪代码</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624095247209.png" alt="image-20220624095247209"></p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624100011427.png" alt="image-20220624100011427"></p><p>将 ：{hacking_for_fun}</p><p>i和r替换为1</p><h2 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h2><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624101137339.png" alt="image-20220624101137339"></p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624103234143.png" alt="image-20220624103234143"></p><p>双击进入main_0</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624103334318.png" alt="image-20220624103334318"></p><p>直接flag</p><h2 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h2><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220624174141942.png" alt="image-20220624174141942"></p><p>upx加密使用工具去壳 or 动态od 脱壳</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625093823581.png" alt="image-20220625093823581"></p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625093846273.png" alt="image-20220625093846273"></p><p>idapro32打开就是flag</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625094025841.png" alt="image-20220625094025841"></p><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625095455799.png" alt="image-20220625095455799"></p><p>无壳64位mac 软件 ida64pro打开直接f5反编译</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625100109897.png" alt="image-20220625100109897"></p><p>双金进入global</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625100214564.png" alt="image-20220625100214564"><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625100627931.png" alt="image-20220625100627931"></p><p>双击进入里面</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625100919422.png" alt="image-20220625100919422">复制一份到剪贴板</p><p>让后shift+e</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625101033616.png" alt="image-20220625101033616"></p><p>转换为数组</p><p>密文[0x66, 0x0A, 0x6B, 0x0C, 0x77, 0x26, 0x4F, 0x2E, 0x40, 0x11, 0x78, 0x0D, 0x5A, 0x3B, 0x55, 0x11, 0x70, 0x19, 0x46, 0x1F, 0x76, 0x22, 0x4D, 0x23, 0x44, 0x0E, 0x67, 0x06, 0x68, 0x0F, 0x47, 0x32, 0x4F, 0x00]</p><p>xor异或 密文 依次-1让后得到flag</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cipher = <span class="hljs-selector-attr">[0x66, 0x0A, 0x6B, 0x0C, 0x77, 0x26, 0x4F, 0x2E, 0x40, 0x11, 0x78, 0x0D, 0x5A, 0x3B, 0x55, 0x11, 0x70, 0x19, 0x46, 0x1F, 0x76, 0x22, 0x4D, 0x23, 0x44, 0x0E, 0x67, 0x06, 0x68, 0x0F, 0x47, 0x32, 0x4F, 0x00]</span><br>cipher_text=<span class="hljs-selector-attr">[0]</span> *<span class="hljs-built_in">len</span>(cipher)<br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(cipher) -<span class="hljs-number">1</span>):<br>    result += <span class="hljs-built_in">chr</span>(cipher<span class="hljs-selector-attr">[i]</span> ^ cipher<span class="hljs-selector-attr">[i-1]</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(chr(cipher[<span class="hljs-number">0</span>])</span></span>+result)<br>#flag&#123;QianQiuWanDai_YiTongJiangHu&#125;<br></code></pre></td></tr></table></figure><h2 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a>helloword</h2><p>下载下来是个apk使用apkide打开</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625105637665.png" alt="image-20220625105637665"></p><p>依次打开smali&gt;com&gt;example&gt;helloword&gt;MainActivity.smali</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625105737705.png" alt="image-20220625105737705"></p><p>flag出来</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625105835945.png" alt="image-20220625105835945"></p><h2 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h2><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625110529049.png" alt="image-20220625110529049"></p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20220625110838140.png" alt="image-20220625110838140"></p><p>双击进入_main_0</p><p>f5查看伪代码</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316203948983.png" alt="image-20230316203948983"></p><p>让后进去str2找到密文<code>e3nifIH9b_C@n@dH</code></p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316203853019.png" alt="image-20230316203853019"></p><p> 先base64 在异或+- 逆向倒着来写出脚本</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import base64<br>cipher = <span class="hljs-string">&#x27;e3nifIH9b_C@n@dH&#x27;</span><br>result =<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>    result +=<span class="hljs-built_in">chr</span>( <span class="hljs-built_in">ord</span>(cipher<span class="hljs-selector-attr">[i]</span>) - i)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(base64.b64decode(result)</span></span>)<br>#flag&#123;i_l0ve_you&#125;<br></code></pre></td></tr></table></figure><p><code>flag&#123;i_l0ve_you&#125;</code></p><h2 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h2><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316204307860.png" alt="image-20230316204307860"></p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316204332415.png" alt="image-20230316204332415"></p><p>查看无壳</p><p>ida32 打开直接就是main </p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316204430912.png" alt="image-20230316204430912"></p><p>看到上写左右和一堆有规则的字符串猜测迷宫题目</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-symbol">*11110100001010000101111</span><span class="hljs-meta"># 源字符串</span><br><br><span class="hljs-symbol">*1111</span><br><span class="hljs-number">01000</span><br><span class="hljs-number">01010</span><br><span class="hljs-number">00010</span><br><span class="hljs-number">1111</span><span class="hljs-meta">#</span><br>修改后<br><br><br>控制器<br><br><span class="hljs-number">1</span> up 上<br><span class="hljs-number">2</span> down 下<br><span class="hljs-number">3</span> left 坐<br><span class="hljs-number">4</span> right 右<br></code></pre></td></tr></table></figure><p><code> flag&#123;222441144222&#125;</code></p><h2 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h2><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316204930805.png" alt="image-20230316204930805"></p><p>查克不存在发现是Linux 64位程序</p><p>让后使用ida64 打开调试发现 不行</p><p>一直都不能运行</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316205029585.png" alt="image-20230316205029585"></p><p>让后</p><p>使用ida静态分析</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs smali">v11 = __readfsqword(0x28u);<br>  *(_QWORD *)src = &#x27;S<span class="hljs-class">LCDN&#x27;;</span>                     // NDCLS<br>  v7 = 0<span class="hljs-class">LL;</span><br>  v8 = 0;<br>  v9[0] = &#x27;wodah&#x27;;                              // hadow<br>  v9[1] = 0<span class="hljs-class">LL;</span><br>  v10 = 0;<br>  text = join(key3, (const char *)v9);          // text = killshadow<br>  strcpy(key, key1);                            // ADSFK<br>  strcat(key, src);                             // key = ADSFKDNLCS 错<br>                                                // 大小端序<br>                                                // key = ADSFKNDCLS 对<br>  v2 = 0;<br>  v3 = 0;<br>  getchar();<br>  v5 = strlen(key);                             // 长度给v5<br>  for ( i = 0; i &lt; v5; ++i )<br>  &#123;<br>   <span class="hljs-built_in"> if </span>( key[v3 % v5] &gt; 64 &amp;&amp; key[v3 % v5] &lt;= 90 )// 将大写转换为小写<br>      key[i] = key[v3 % v5] + 32;<br>    ++v3;<br>  &#125;<br>  printf(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);<br>  while ( 1 )<br>  &#123;<br>    v1 = getchar();                             // 缓冲<br>   <span class="hljs-built_in"> if </span>( v1 == &#x27;\n&#x27; )                           // 输入回车退出<br>      break;<br>   <span class="hljs-built_in"> if </span>( v1 == &#x27; &#x27; )                            // 输入 v2加1<br>    &#123;<br>      ++v2;<br>    &#125;<br>    else<br>    &#123;<br>     <span class="hljs-built_in"> if </span>( v1 &lt;= 96 || v1 &gt; 122 )               // v1 小写<br>      &#123;<br>       <span class="hljs-built_in"> if </span>( v1 &gt; 64 &amp;&amp; v1 &lt;= 90 )              // v1大写<br>        &#123;<br>          str2[v2] = (v1 - 39 - key[v3 % v5] + 97) % 26 + 97;// 算法<br>          ++v3;<br>        &#125;<br>      &#125;<br>      else<br>      &#123;<br>        str2[v2] = (v1 - 39 - key[v3 % v5] + 97) % 26 + 97;<br>        ++v3;<br>      &#125;<br>     <span class="hljs-built_in"> if </span>( !(v3 % v5) )<br>        putchar(32);<br>      ++v2;<br>    &#125;<br>  &#125;<br> <span class="hljs-built_in"> if </span>( !strcmp(text, str2) )<br>    puts(<span class="hljs-string">&quot;Congratulation!\n&quot;</span>);<br>  else<br>    puts(<span class="hljs-string">&quot;Try again!\n&quot;</span>);<br> <span class="hljs-built_in"> return </span>__readfsqword(0x28u) ^ v11;<br>&#125;<br></code></pre></td></tr></table></figure><p>让写出脚本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs maxima">import <span class="hljs-built_in">string</span><br><br>cipher = <span class="hljs-string">&quot;killshadow&quot;</span><br><span class="hljs-built_in">key</span> = <span class="hljs-string">&quot;ADSFKNDCLS&quot;</span><br><span class="hljs-built_in">key</span> = str.lower(<span class="hljs-built_in">key</span>)  # 转换小写<br>result = []<br>dic = <span class="hljs-built_in">string</span>.ascii_uppercase + <span class="hljs-built_in">string</span>.ascii_letters  # 字典<br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(len(cipher)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>        <span class="hljs-keyword">if</span> (ord(j) - <span class="hljs-number">39</span> - ord(<span class="hljs-built_in">key</span>[i]) + <span class="hljs-number">97</span>) <span class="hljs-symbol">%</span> <span class="hljs-number">26</span> + <span class="hljs-number">97</span> == ord(cipher[i]):<br>            result.<span class="hljs-built_in">append</span>(j)<br>            <span class="hljs-built_in">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag&#123;&quot;</span> + <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-built_in">join</span>(result) + <span class="hljs-string">&quot;&#125;&quot;</span>)<br># flag&#123;KLDQCUDFZO&#125;<br></code></pre></td></tr></table></figure><p><code>flag&#123;KLDQCUDFZO&#125;</code></p><h2 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h2><p>是一个.class文件使用jadx-gui 打开</p><p>看到encode </p><p>让后进入</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316205348723.png" alt="image-20230316205348723"></p><p>写出逆向脚本 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">cipher = [<span class="hljs-number">180</span>, <span class="hljs-number">136</span>, <span class="hljs-number">137</span>, <span class="hljs-number">147</span>, <span class="hljs-number">191</span>, <span class="hljs-number">137</span>, <span class="hljs-number">147</span>, <span class="hljs-number">191</span>, <span class="hljs-number">148</span>, <span class="hljs-number">136</span>, <span class="hljs-number">133</span>, <span class="hljs-number">191</span>, <span class="hljs-number">134</span>, <span class="hljs-number">140</span>, <span class="hljs-number">129</span>, <span class="hljs-number">135</span>, <span class="hljs-number">191</span>, <span class="hljs-number">65</span>]<br><br>key = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(cipher)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>    key[i] = <span class="hljs-built_in">chr</span>(cipher[i] - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;@&#x27;</span>) ^ <span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(key))<br><span class="hljs-comment">#flag&#123;This_is_the_flag_!&#125;</span><br></code></pre></td></tr></table></figure><p><code>#flag&#123;This_is_the_flag_!&#125;</code></p><h2 id="GXYCTF2019-luck-guy"><a href="#GXYCTF2019-luck-guy" class="headerlink" title="[GXYCTF2019]luck_guy"></a>[GXYCTF2019]luck_guy</h2><p>使用die 工具查壳 发现是64位 无壳子使用ida64 pro 打开</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316221550448.png" alt="image-20230316221550448"></p><p>默认进入main 函数 让后发现没有什么操作直接去patch_me –&gt; get-flag</p><p><img src="https://fastly.jsdelivr.net/gh/huajien/picgo@master/img/image-20230316223527577.png" alt="image-20230316223527577"></p><p>密文<code>[105, 99, 117, 103, 96, 111, 102, 127] </code></p><p>让后写出脚本</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">cipher = [<span class="hljs-number">105</span>, <span class="hljs-number">99</span>, <span class="hljs-number">117</span>, <span class="hljs-number">103</span>, <span class="hljs-number">96</span>, <span class="hljs-number">111</span>, <span class="hljs-number">102</span>, <span class="hljs-number">127</span>] <br><span class="hljs-built_in">result</span> = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">len</span>(cipher)):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">result</span> += chr(cipher[i] <span class="hljs-number">-2</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">result</span> += chr(cipher[i] <span class="hljs-number">-1</span>)<br>print(<span class="hljs-built_in">result</span>)<br><span class="hljs-comment">#GXY&#123;do_not_hate_me&#125;</span><br></code></pre></td></tr></table></figure><p><code>GXY&#123;do_not_hate_me&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> Reverse_wp buuctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> ctf </tag>
            
            <tag> 逆向wp </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idapro断点报错</title>
      <link href="/2022/55227/"/>
      <url>/2022/55227/</url>
      
        <content type="html"><![CDATA[<h3 id="ida-在Generate-pseudocode窗口断点报错"><a href="#ida-在Generate-pseudocode窗口断点报错" class="headerlink" title="ida 在Generate pseudocode窗口断点报错"></a>ida 在Generate pseudocode窗口断点报错</h3><p>在伪c代码视图任意地点断点报错</p><p><img src="https://www.helloimg.com/images/2023/10/03/oHPFrY.png" alt="image-20231003095125435"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs error">The source level debugger has been disabled.<br>To enable it, use Debugger, Use source-level debugging<br></code></pre></td></tr></table></figure><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>将上面的Use source-level debugging点亮</p><p><img src="https://www.helloimg.com/images/2023/10/03/oHPa39.png" alt="image-20231003095237395"></p><p>再短点就可以生效并且不会提示</p><p>The source level debugger has been disabled.<br>To enable it, use Debugger, Use source-level debugging</p>]]></content>
      
      
      <categories>
          
          <category> 日常小问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idapro </tag>
            
            <tag> 日常日记 </tag>
            
            <tag> 反汇编 </tag>
            
            <tag> 断点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ida pro 7.5 使用ipython Byte报错问题解决</title>
      <link href="/2022/34052/"/>
      <url>/2022/34052/</url>
      
        <content type="html"><![CDATA[<h1 id="ida-pro-7-5-使用ipython-Byte报错问题解决"><a href="#ida-pro-7-5-使用ipython-Byte报错问题解决" class="headerlink" title="ida pro 7.5 使用ipython Byte报错问题解决"></a>ida pro 7.5 使用ipython Byte报错问题解决</h1><p>这两天使用ida 发现ipython代码无法运行</p><p>比如PatchByte()，Byte()都提示<br>NameError: name ‘Byte’ is not defined<br>又舍不得放弃7.5(一些题目拿7.5版生成的伪代码比7.0版要好看的多)，<br>于是在网上查了很久，找出了解决办法。</p><h2 id="方法1-兼容办法-："><a href="#方法1-兼容办法-：" class="headerlink" title="方法1(兼容办法)："></a><strong>方法1</strong>(兼容办法)：</h2><p>其次是在比较方便的在7.5用7.0API办法，来源：<a href="https://github.com/0xgalz/Virtuailor/issues/8">https://github.com/0xgalz/Virtuailor/issues/8</a><br>在代码面前：<br>from idc_bc695 import *<br>即可。</p><h2 id="方法2-一劳永逸版-："><a href="#方法2-一劳永逸版-：" class="headerlink" title="方法2(一劳永逸版)："></a><strong>方法2</strong>(一劳永逸版)：</h2><p>来源官方文档：<a href="https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695.shtml">https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695.shtml</a><br>找到</p><ul><li>~&#x2F;.idapro&#x2F;cfg&#x2F;idapython.cfg (Linux)</li><li>%APPDATA%\Hex-Rays\IDA Pro\cfg\idapython.cfg (Windows) (绿色版的话在程序目录下那个cfg文件夹里)</li></ul><p>把AUTOIMPORT_COMPAT_IDA695改为YES</p><p>文章来源 <a href="https://www.52pojie.cn/thread-1403005-1-1.html">52pojie论坛用户神慯</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常小问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idapro </tag>
            
            <tag> ipython </tag>
            
            <tag> ida脚本问题 </tag>
            
            <tag> 日常日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF X GFCTF 2022十月挑战赛！</title>
      <link href="/2022/23913/"/>
      <url>/2022/23913/</url>
      
        <content type="html"><![CDATA[<h1 id="DASCTF-X-GFCTF-2022十月挑战赛！"><a href="#DASCTF-X-GFCTF-2022十月挑战赛！" class="headerlink" title="DASCTF X GFCTF 2022十月挑战赛！"></a>DASCTF X GFCTF 2022十月挑战赛！</h1><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="贪玩CTF"><a href="#贪玩CTF" class="headerlink" title="贪玩CTF"></a>贪玩CTF</h3><p>die看无壳 64位</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221023225242453.png" alt="image-20221023225242453"></p><p>使用ida64动态调试发现自动退出</p><p>发现TlsCallback_0 在start函数前面执行</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221023225905176.png" alt="image-20221023225905176"></p><p>把call    cs:IsDebuggerPresent nop掉</p><p>并把 jz patch 换成jnz</p><p>如下图</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221023230137420.png" alt="image-20221023230137420"></p><p>可以正常调试了</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221023230339130.png" alt="image-20221023230339130"></p><p>shift+f12看字符串</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221023230518151.png" alt="image-20221023230518151"></p><p>进去 ctrl + x 数据的交叉引用 静态分析</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221023231430104.png" alt="image-20221023231430104"></p><p>进入sub_7FF6ED1619C0 函数</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221023231725807.png" alt="image-20221023231725807"></p><p>长度如果不等于16 返回 -1 得到是账户是 是16位</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221023231835581.png" alt="image-20221023231835581"></p><p>返回-1 弹出 弹窗 字符长长度不对</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221023233439701.png" alt="image-20221023233439701"></p><p>和上面一样密码也是16位 否则返回 -1 然后提示框 长度不对</p><p>让后我随便输入16个账户和16个密码</p><p>最下面有异或</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024002114932.png" alt="image-20221024002114932"></p><p>下面的判断给他断下来按tab转汇编窗口</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024001716092.png" alt="image-20221024001716092"></p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024002040359.png" alt="image-20221024002040359"></p><p>双击进入rsi寄存器</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024002149163.png" alt="image-20221024002149163"></p><p>提取</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024002343866.png" alt="image-20221024002343866"></p><p>编写脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python3">str1 = [   0x04, 0x1F, 0x1F, 0x1E, 0x43, 0x4B, 0x43, 0x45, 0x44, 0x00, 0x16, 0x10, 0x55, 0x17, 0x12, 0x73]<br>str2= &#x27;&#x27;<br>for i in range(len(str1) -1):<br>    str2 += chr(str1[i] ^ 0x73)<br>str2 += chr(0x73)<br>print(str2)<br></code></pre></td></tr></table></figure><p>账户：wllm08067sec&amp;das</p><p>分析密码进入 sub_7FF6ED161390函数</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024002614641.png" alt="image-20221024002614641"></p><p>进入 byte_7FF6ED166040 字节</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024004933249.png" alt="image-20221024004933249"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">63h</span>, <span class="hljs-number">7</span>Ch, <span class="hljs-number">77</span>h, <span class="hljs-number">7</span>Bh, <span class="hljs-number">0</span>F2h, <span class="hljs-number">6</span>Bh, <span class="hljs-number">6</span>Fh, <span class="hljs-number">0</span>C5h, <span class="hljs-number">30</span>h, <span class="hljs-number">1</span>, <span class="hljs-number">67</span>h, <span class="hljs-number">2</span>Bh, <span class="hljs-number">0</span>FEh, <span class="hljs-number">0</span>D7h<br></code></pre></td></tr></table></figure><p>​aes加密 特征</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024010824134.png" alt="image-20221024010824134"></p><p>根据上面猜测上面的buffer应该是密钥</p><p>密钥：wllm08067sec&amp;das</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024100831027.png" alt="image-20221024100831027"></p><p>让后跳出往下走</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024100354185.png" alt="image-20221024100354185"></p><p>byte_7FF6ED166990[v18] 是自己输入的密码 </p><p>byte_7FF6ED1643D8[v18] 是aes加密后的密码</p><p>提取byte_7FF6ED1643D8[v18] 里面的字符</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024101025399.png" alt="image-20221024101025399"></p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024101047770.png" alt="image-20221024101047770"></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">\x3C\x97\x72\x96\x5A\x33\x63\x9C\x97\x30\x4D\x90\x84\xE8\x5F\x56<br></code></pre></td></tr></table></figure><p>让后我们找个在线aes 解密<a href="https://the-x.cn/cryptography/Aes.aspx">https://the-x.cn/cryptography/Aes.aspx</a></p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024101439316.png" alt="image-20221024101439316"></p><p>账户是：wllm08067sec&amp;das</p><p>密码是：e4deb7a6510a10f7</p><p><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/image-20221024101605649.png" alt="image-20221024101605649"></p><p>flag 格式为DASCTF{账号+密码}</p><p>DASCTF{wllm08067sec&amp;dase4deb7a6510a10f7}</p>]]></content>
      
      
      <categories>
          
          <category> Reverse_wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DASCTF </tag>
            
            <tag> 2022十月挑战赛 </tag>
            
            <tag> 贪玩CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编 JCC指令表</title>
      <link href="/2022/21569/"/>
      <url>/2022/21569/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编-JCC指令表"><a href="#汇编-JCC指令表" class="headerlink" title="汇编 JCC指令表"></a>汇编 JCC指令表</h1><h3 id="JCC指条件跳转指令，CC就是指条件码。"><a href="#JCC指条件跳转指令，CC就是指条件码。" class="headerlink" title="JCC指条件跳转指令，CC就是指条件码。"></a>JCC指条件跳转指令，CC就是指条件码。</h3><table><thead><tr><th>JCC指令</th><th>中文含义</th><th>英文原意</th><th>检查符号位</th><th>典型c应用</th></tr></thead><tbody><tr><td>JZ&#x2F;JE</td><td>若为0则跳转；若相等则跳转</td><td>jump if zero;jump if equal</td><td>ZF&#x3D;1</td><td>if (i &#x3D;&#x3D; j);if (i &#x3D;&#x3D; 0);</td></tr><tr><td>JNZ&#x2F;JNE</td><td>若不为0则跳转；若不相等则跳转</td><td>jump if not zero;jump if not equal</td><td>ZF&#x3D;0</td><td>if (i !&#x3D; j);if (i !&#x3D; 0);</td></tr><tr><td>JS</td><td>若为负则跳转</td><td>jump if sign</td><td>SF&#x3D;1</td><td>if (i &lt; 0);</td></tr><tr><td>JNS</td><td>若为正则跳转</td><td>jump if not sign</td><td>SF&#x3D;0</td><td>if (i &gt; 0);</td></tr><tr><td>JP&#x2F;JPE</td><td>若1出现次数为偶数则跳转</td><td>jump if Parity (Even)</td><td>PF&#x3D;1</td><td>(null)</td></tr><tr><td>JNP&#x2F;JPO</td><td>若1出现次数为奇数则跳转</td><td>jump if not parity (odd)</td><td>PF&#x3D;0</td><td>(null)</td></tr><tr><td>JO</td><td>若溢出则跳转</td><td>jump if overflow</td><td>OF&#x3D;1</td><td>(null)</td></tr><tr><td>JNO</td><td>若无溢出则跳转</td><td>jump if not overflow</td><td>OF&#x3D;0</td><td>(null)</td></tr><tr><td>JC&#x2F;JB&#x2F;JNAE</td><td>若进位则跳转；若低于则跳转；若不高于等于则跳转</td><td>jump if carry;jump if below;jump if not above equal</td><td>CF&#x3D;1</td><td>if (i &lt; j);</td></tr><tr><td>JNC&#x2F;JNB&#x2F;JAE</td><td>若无进位则跳转；若不低于则跳转；若高于等于则跳转</td><td>jump if not carry;jump if not below;jump if above equal</td><td>CF&#x3D;0</td><td>if (i &gt;&#x3D; j);</td></tr><tr><td>JBE&#x2F;JNA</td><td>若低于等于则跳转；若不高于则跳转</td><td>jump if below equal;jump if not above</td><td>ZF&#x3D;1或CF&#x3D;1</td><td>if (i &lt;&#x3D; j);</td></tr><tr><td>JNBE&#x2F;JA</td><td>若不低于等于则跳转；若高于则跳转</td><td>jump if not below equal;jump if above</td><td>ZF&#x3D;0或CF&#x3D;0</td><td>if (i &gt; j);</td></tr><tr><td>JL&#x2F;JNGE</td><td>若小于则跳转；若不大于等于则跳转</td><td>jump if less;jump if not greater equal</td><td>SF !&#x3D; OF</td><td>if (si &lt; sj);</td></tr><tr><td>JNL&#x2F;JGE</td><td>若不小于则跳转；若大于等于则跳转</td><td>jump if not less;jump if greater equal</td><td>SF&#x3D;OF</td><td>if (si &gt;&#x3D; sj);</td></tr><tr><td>JLE&#x2F;JNG</td><td>若小于等于则跳转；若不大于则跳转</td><td>jump if less equal;jump if not greater</td><td>ZF !&#x3D; OF 或 ZF&#x3D;1</td><td>if (si &lt;&#x3D; sj);</td></tr><tr><td>JNLE&#x2F;JG</td><td>若不小于等于则跳转；若大于则跳转</td><td>jump if not less equal;jump if greater</td><td>SF&#x3D;OF 且 ZF&#x3D;0</td><td>if(si&gt;sj)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 32位汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编跳转 </tag>
            
            <tag> 跳转指令 </tag>
            
            <tag> jcc </tag>
            
            <tag> je </tag>
            
            <tag> jc </tag>
            
            <tag> jb </tag>
            
            <tag> ja </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win_xp配置双机调试</title>
      <link href="/2022/9843/"/>
      <url>/2022/9843/</url>
      
        <content type="html"><![CDATA[<h2 id="xp配置双机调试"><a href="#xp配置双机调试" class="headerlink" title="xp配置双机调试"></a>xp配置双机调试</h2><h3 id="先安装Windows-xp-系统让后"><a href="#先安装Windows-xp-系统让后" class="headerlink" title="先安装Windows xp 系统让后"></a>先安装Windows xp 系统让后</h3><p>在C盘目录下有一个 boot.ini 文件，默认情况下的配置如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[boot loader]</span><br><span class="hljs-attr">timeout</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">default</span>=multi(<span class="hljs-number">0</span>)disk(<span class="hljs-number">0</span>)rdisk(<span class="hljs-number">0</span>)partition(<span class="hljs-number">1</span>)\WINDOWS<br><span class="hljs-section">[operating systems]</span><br>multi(0)disk(0)rdisk(0)partition(1)\<span class="hljs-attr">WINDOWS</span>=<span class="hljs-string">&quot;Microsoft Windows XP Professional&quot;</span><br>/<span class="hljs-attr">noexecute</span>=optin /fastdetect<br><br>//增加两行，在32位环境下有2种分页模式，1种为 2-9-9-12 ，1种为 10-10-12<br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[boot loader]</span><br><span class="hljs-attr">timeout</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">default</span>=multi(<span class="hljs-number">0</span>)disk(<span class="hljs-number">0</span>)rdisk(<span class="hljs-number">0</span>)partition(<span class="hljs-number">1</span>)\WINDOWS<br><span class="hljs-section">[operating systems]</span><br>multi(0)disk(0)rdisk(0)partition(1)\<span class="hljs-attr">WINDOWS</span>=<span class="hljs-string">&quot;XP Debug[2-9-9-12]&quot;</span> /noexecute=optin /fastdetect /debug /debugport=com1<br>multi(0)disk(0)rdisk(0)partition(1)\<span class="hljs-attr">WINDOWS</span>=<span class="hljs-string">&quot;XP Debug[10-10-12]&quot;</span> /execute=optin /fastdetect /debug /debugport=com1<br>multi(0)disk(0)rdisk(0)partition(1)\<span class="hljs-attr">WINDOWS</span>=<span class="hljs-string">&quot;Microsoft Windows XP Professional&quot;</span> /noexecute=optin /fastdetect<br></code></pre></td></tr></table></figure><h4 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h4><p>让后删除虚拟机的打印机<br>打印机会占用一个串口<br><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309270852306.png" alt="image-20230927085255214"></p><p><code>\\.\pipe\com_1</code><br><img src="https://cdn.jsdelivr.net/gh/huajien/picgo@master/img/202309270856105.png" alt="image-20230927085255214"></p><h3 id="windbg"><a href="#windbg" class="headerlink" title="windbg"></a>windbg</h3><p>安装windbg 后配置</p><p><code>windbg绝对路径&quot; -b -k com:pipe,port=\\.\pipe\com_1,resets=0</code></p><p>启动Windows xp</p><p>选择debug模式</p><p>启动配置好的快捷方式</p><p>完结撒花！！！</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> 双机调试 </tag>
            
            <tag> Windows xp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言中的标志位</title>
      <link href="/2022/34732/"/>
      <url>/2022/34732/</url>
      
        <content type="html"><![CDATA[<h2 id="汇编中的：CF、PF、AF、ZF、SF、TF、IF、DF、OF标志位"><a href="#汇编中的：CF、PF、AF、ZF、SF、TF、IF、DF、OF标志位" class="headerlink" title="汇编中的：CF、PF、AF、ZF、SF、TF、IF、DF、OF标志位"></a>汇编中的：CF、PF、AF、ZF、SF、TF、IF、DF、OF标志位</h2><h3 id="CF-进位标志位"><a href="#CF-进位标志位" class="headerlink" title="CF:进位标志位"></a><strong>CF</strong>:进位标志位</h3><p>在无符号运算时，记录了运算结果的最高有效位向更高位的进位值或从更高位借位，产生进位或借位时CF&#x3D;1，否则CF&#x3D;0；</p><h3 id="PF-奇偶标志位"><a href="#PF-奇偶标志位" class="headerlink" title="PF:奇偶标志位"></a><strong>PF</strong>:奇偶标志位</h3><p>相关指令执行后结果所有bit中1的个数为偶数，那么PF&#x3D;1，1的个数为奇数则PF&#x3D;0；</p><h3 id="AF-辅助进位标志位"><a href="#AF-辅助进位标志位" class="headerlink" title="AF:辅助进位标志位"></a><strong>AF</strong>:辅助进位标志位</h3><p>运算过程中看最后四位，不论长度为多少。最后四位向前有进位或者借位，AF&#x3D;1,否则AF&#x3D;0;</p><h3 id="ZF-零标志位"><a href="#ZF-零标志位" class="headerlink" title="ZF:零标志位"></a><strong>ZF</strong>:零标志位</h3><p>相关指令执行后结果为0那么ZF&#x3D;1,结果不为0则ZF&#x3D;0；</p><h3 id="SF-符号标志位"><a href="#SF-符号标志位" class="headerlink" title="SF:符号标志位"></a><strong>SF</strong>:符号标志位</h3><p>相关指令执行后结果为负那么SF&#x3D;1，结果非负数则SF&#x3D;0；</p><h3 id="TF-调试标志位"><a href="#TF-调试标志位" class="headerlink" title="TF:调试标志位"></a><strong>TF</strong>:调试标志位</h3><p>当TF&#x3D;1时，处理器每次只执行一条指令，即单步执行;</p><h3 id="IF-中断允许标志位"><a href="#IF-中断允许标志位" class="headerlink" title="IF:中断允许标志位"></a><strong>IF</strong>:中断允许标志位</h3><p>它用来控制8086是否允许接收外部中断请求。若IF&#x3D;1，8086能响应外部中断，反之则屏蔽外部中断;</p><h3 id="DF-方向标志位"><a href="#DF-方向标志位" class="headerlink" title="DF:方向标志位"></a><strong>DF</strong>:方向标志位</h3><p>在串处理指令中，每次操作后，如果DF&#x3D;0，si、di递增，如果DF&#x3D;1，si、di递减；注意此处DF的值是由程序员进行设定的 cld命令是将DF设置为0，std命令是将DF设置为1；</p><h3 id="OF-溢出标志位"><a href="#OF-溢出标志位" class="headerlink" title="OF:溢出标志位"></a><strong>OF</strong>:溢出标志位</h3><p>记录了有符号运算的结果是否发生了溢出，如果发生溢出OF&#x3D;1,如果没有OF&#x3D;0；</p>]]></content>
      
      
      <categories>
          
          <category> 32位汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编标志位 </tag>
            
            <tag> CF </tag>
            
            <tag> PF </tag>
            
            <tag> AF </tag>
            
            <tag> ZF </tag>
            
            <tag> SF </tag>
            
            <tag> TF </tag>
            
            <tag> IF </tag>
            
            <tag> DF </tag>
            
            <tag> OF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三届xcitc-ctf招新赛部分题解</title>
      <link href="/2021/11431/"/>
      <url>/2021/11431/</url>
      
        <content type="html"><![CDATA[<h1 id="write-up"><a href="#write-up" class="headerlink" title="write up"></a>write up</h1><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="Ez-ez"><a href="#Ez-ez" class="headerlink" title="Ez_ez"></a>Ez_ez</h3><p>Ez_ez然后找ida64打开这个helloELF这个文件搜索ida工具使用教程然后按了f5答案就出来了</p><h3 id="ez-asm"><a href="#ez-asm" class="headerlink" title="ez_asm"></a>ez_asm</h3><p>ez_asm 打开发现里面有H，H在计算机中表示16进制，让后尝试16进制转换为10进制让后换算出来ASCII</p><p>依次类推转换完就是pflag{Hello_Assembly}</p><h3 id="welcome-login"><a href="#welcome-login" class="headerlink" title="welcome_login"></a>welcome_login</h3><p>welcome_login下载发现是一个可执行文件然后使用ida64打开发现没有然后使用ida32位打开选中几个字段然后跳转到地址然后上下找发现分成三段然后一个一个复制让后就出来了答案</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="欢迎欢迎"><a href="#欢迎欢迎" class="headerlink" title="欢迎欢迎"></a>欢迎欢迎</h3><p>欢迎欢迎题首先打开里面的连接，习惯性的按f12查看内存中的源代码发现里面又一行注释falg.txt让后在端口后面&#x2F;flag.txt发现flag{welcome_to_xcitc_21}</p><h3 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h3><p>easyphp进入先看if 条件 发现是get传参数flag如果等于0就输出结果</p><p>让后就开始做题端口后面加&#x2F;?flag[]&#x3D;0 结果就出来了flag{f97c5d29941bfb1b2fdab0874906ab82}</p><h3 id="还不能相同？"><a href="#还不能相同？" class="headerlink" title="还不能相同？"></a>还不能相同？</h3><p>还不能相同？进入先看单行多if 条件 发现是get传参数username和password让后条件是</p><p>username和password两个不能相同让后我们就在端口后面加&#x2F;?username[]&#x3D;huaji&amp;password[]&#x3D;zhien</p><p>结果就出来了Flag: flag{1bc29b36f623ba82aaf6724fd3b16718}</p><h3 id="大飞机，呼呼呼"><a href="#大飞机，呼呼呼" class="headerlink" title="大飞机，呼呼呼"></a>大飞机，呼呼呼</h3><p>大飞机，呼呼呼这个就不一样了一开始以为是账号密码破解试了好久不对，让后就闲着没事打开kali使用burp suite扫一下这个地址不扫不知道发现里面有flag: Wm14aFozdG9kSFJ3WDJobFlXUmxjbDlvYUdoOQ&#x3D;&#x3D;，看到后面有两个&#x3D;&#x3D;直接幻想base64</p><p>然后网上搜索在线base64解密使用发现还是密文ZmxhZ3todHRwX2hlYWRlcl9oaGh9就在次复制上次解密一次的base64继续解密发现了flag让后结果就出来了flag{http_header_hhh}</p><h2 id="一起打篮球吧。。。。"><a href="#一起打篮球吧。。。。" class="headerlink" title="一起打篮球吧。。。。"></a>一起打篮球吧。。。。</h2><p>一起打篮球吧。。。。打开题按f12查看内存中的源代码发现里面又一行注释robots.txt 让后&#x2F;robots.txt</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">User-agent: *<br>Disallow: <span class="hljs-regexp">/admin/</span><br>Disallow: <span class="hljs-regexp">/admin/</span>shell/<br>Disallow: <span class="hljs-regexp">/admin/</span>shell/flag.php<br></code></pre></td></tr></table></figure><p>发现&#x2F;admin&#x2F;shell&#x2F;flag.php 访问发现啥也没有让后思考思考想不出来</p><p>让后的有一个点击获取flag，点击之后发现&#x2F;?file&#x3D;hint.html 让后靠我的百度搜</p><p>php有file漏洞</p><p>就按照百度方法改改&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;admin&#x2F;shell&#x2F;flag.php</p><p>让后发现是密文PD9waHAKJGZsYWcgPSAnZmxhZ3tMRklfMXNfZjRufSc7Ci8vIGVjaG8gJGZsYWc7Cj8+Cg&#x3D;&#x3D;</p><p>让后找在线base64解密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;LFI_1s_f4n&#125;&#x27;</span>;<br><span class="hljs-comment">// echo $flag;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后结果就出来了flag{LFI_1s_f4n}</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="NC之光"><a href="#NC之光" class="headerlink" title="NC之光"></a>NC之光</h3><p>NC之光我先用kali 终端命令行输入nc 121.40.134.251:10000 让后提示地址不存在，让后进群划水得知去掉”:”让后nc 121.40.134.251 10000进入了发现有flag.txt 让后cat flag.txt</p><p>让后结果就出来了flag{f3857b88-c92c-4426-89a6-ee94e4eac938}</p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="crypto-1"><a href="#crypto-1" class="headerlink" title="crypto"></a>crypto</h3><p>前十个都是浏览器搜索名称让后就出结果了等等等。。。。。。</p><h3 id="asc"><a href="#asc" class="headerlink" title="asc"></a>asc</h3><p>asc打开是ASCII偏移根据提示偏移-4然后根据提示的ord和cha</p><p>python写出如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">keys=<span class="hljs-string">&#x27;Iew&#125;cewgchigshi%%%&#x27;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> keys:<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="Ez-xor"><a href="#Ez-xor" class="headerlink" title="Ez_xor"></a>Ez_xor</h3><p>看百度加谷歌加哔哩哔哩同时做出的题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">keys=<span class="hljs-string">&#x27;Qtwjqf~Tof3hfZwj\Wf6qlw\]4Wf\sf7zZFdp|\]3W&quot;$&quot;x&#x27;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br>ii = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> keys: <br>  <span class="hljs-keyword">if</span> ii == <span class="hljs-number">0</span> :<br>​    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">3</span>)<br>​    ii=ii+<span class="hljs-number">1</span><br>  <span class="hljs-keyword">else</span>:<br>​    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">5</span>)<br>​    ii=ii-<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="flag好像要扫一扫"><a href="#flag好像要扫一扫" class="headerlink" title="flag好像要扫一扫"></a>flag好像要扫一扫</h3><p>flag好像要扫一扫打开压缩包提示密码使用PassperforZIP_v3.6.0.1工具按照题提示走的密码直接出密码为1234</p><p>打开尽然是个微信二维码好友加好友就给我flag让后结果忘记了</p><h3 id="大吉"><a href="#大吉" class="headerlink" title="大吉"></a>大吉</h3><p>大吉是一个pdf百度得知pdf在ctf中直接转换为word就可以弄出让后使用网页在线pdf转换word</p><p>转换之后打开文件把照片移走就是答案了</p><h3 id="乌贼乌贼"><a href="#乌贼乌贼" class="headerlink" title="乌贼乌贼"></a>乌贼乌贼</h3><p>乌贼乌贼是一个图片百度得知图片在ctf中用16进制打开就是答案让后我下载了hex工具打开之后从下往上在最后面看到flag让后就出来了</p><h3 id="奇怪的压缩包"><a href="#奇怪的压缩包" class="headerlink" title="奇怪的压缩包"></a>奇怪的压缩包</h3><p>奇怪的压缩包直接打开压缩包让后打开里面word文件里面就是答案</p><h3 id="Ez-png"><a href="#Ez-png" class="headerlink" title="Ez_png"></a>Ez_png</h3><p>Ez_png是一个压缩包里面有一个图片让后打开是一个500*500的图片让后百度搜索ctf图片隐写然后尝试使用010editor工具按照百度上面的改宽度高度都是600发现打不开然后改成1000还是打不开然后陷入思考在看题提示然后就尝试单独改高度改成600发现下面又flag然后就出来答案了</p><h3 id="你知道GIF嘛"><a href="#你知道GIF嘛" class="headerlink" title="你知道GIF嘛"></a>你知道GIF嘛</h3><p>你知道GIF嘛是一个压缩包里面一个jpg图片然后一直找不到思路让后在群里面别人在了在了聊java环境和stegsolve然后我就在想这是那个题让后发现你知道GIF嘛这个题提示看到stegsolve然后在网上弄了工具打开然后一直切换颜色发现一直不出答案然后就靠百度搜索搜索stegsolve用法发现有analyse下面的frame browse 发现有三个图片然后切换发现答案</p><h3 id="正经的jpg？"><a href="#正经的jpg？" class="headerlink" title="正经的jpg？"></a>正经的jpg？</h3><p>正经的jpg？根据Ez_png的那一题百度知道使用kali终端binwalk 命令</p><p>然后binwalk cover.jpg</p><p>└─$ binwalk cover.jpg</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-type">DECIMAL</span>       <span class="hljs-type">HEXADECIMAL</span>     <span class="hljs-type">DESCRIPTION</span>                                            <br><span class="hljs-comment">--------------------------------------------------------------------------------                                         </span><br><span class="hljs-number">0</span>             <span class="hljs-number">0x0</span>             <span class="hljs-type">JPEG</span> image <span class="hljs-class"><span class="hljs-keyword">data</span>, <span class="hljs-type">JFIF</span> standard 1.01                                          </span><br><span class="hljs-number">58499</span>         <span class="hljs-number">0xE483</span>          <span class="hljs-type">JPEG</span> image <span class="hljs-class"><span class="hljs-keyword">data</span>, <span class="hljs-type">EXIF</span> standard</span><br><span class="hljs-number">58511</span>         <span class="hljs-number">0xE48F</span>          <span class="hljs-type">TIFF</span> image <span class="hljs-class"><span class="hljs-keyword">data</span>, big-endian, offset of first image directory: 8</span><br></code></pre></td></tr></table></figure><p>里面是两个文件让后尝试进入Windows把图片后缀改成zip然后打不开然后就继续百度使用</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=cover.jpg <span class="hljs-attribute">of</span>=2.jpg <span class="hljs-attribute">skip</span>=58499 <span class="hljs-attribute">bs</span>=1 <br>记录了882232+0 的读入                                     记录了882232+0 的写出                                     882232字节（882 kB，862 KiB）已复制，1.30735 s，675 kB/s <br></code></pre></td></tr></table></figure><p>然后提示写入一个文件我让后在kali里面双击进入发现打不开然后陷入思考想不出来就把他拖拉到Windows里面想着备份然后拖拉过来之后发现可以打开然后就出来答案了</p><h3 id="flag为flag-号码进行一次md5加密"><a href="#flag为flag-号码进行一次md5加密" class="headerlink" title="flag为flag{号码进行一次md5加密}"></a>flag为flag{号码进行一次md5加密}</h3><p>flag为flag{号码进行一次md5加密}打开发现是一个zip里面一个wav音频格式让后播放发现是声音还能播放然后百度得知可以使用工具audacity然后弄了很久还是没有弄出来可能是不会使用这个工具让后尝试使用手机的按键声音和ctf中的声音对比发现啥也听不过来让后在次使用百度搜索拨号码提取工具让后在GitHub中找到一款手机上面的一款DTMFdecodeer让后电脑播放音乐手机使用这个软件听出是783083491然后在百度中搜索md5加密让后转换提交发现不对然后看了还有其他的加密选项64位大写小写32位等然后一个一个尝试发现64位小数还是大写忘记了然后答案出来了</p>]]></content>
      
      
      <categories>
          
          <category> xcitc wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> xcitc </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/2021/42437/"/>
      <url>/2021/42437/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-功能说明"><a href="#Git-功能说明" class="headerlink" title="Git 功能说明"></a>Git 功能说明</h1><p>Git 是一种分布式版本控制系统，它能够协助团队合作开发、管理代码版本，并跟踪文件的改动。</p><h2 id="Git-基本配置"><a href="#Git-基本配置" class="headerlink" title="Git 基本配置"></a>Git 基本配置</h2><p>在开始使用 Git 之前，需要进行一些基本的配置，包括设置用户名和邮箱等信息。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;你的用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>使用 <code>git init</code> 命令可以创建一个新的本地仓库。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>如果想要获取远程仓库的代码到本地，可以使用 <code>git clone</code> 命令。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;仓库地址&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>以下是一些常用的 Git 命令和操作：</p><ul><li><code>git add &lt;文件名&gt;</code>：将文件添加到暂存区。</li><li><code>git commit -m &quot;提交信息&quot;</code>：将暂存区的改动提交到本地仓库。</li><li><code>git status</code>：显示工作区和暂存区的状态。</li><li><code>git log</code>：查看提交历史记录。</li><li><code>git branch</code>：列出所有分支。</li><li><code>git checkout &lt;分支名&gt;</code>：切换到指定的分支。</li><li><code>git merge &lt;分支名&gt;</code>：将指定分支合并到当前分支。</li></ul><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><p>使用分支可以同时进行多个功能的开发，一些常见的分支操作：</p><ul><li><code>git branch &lt;分支名&gt;</code>：创建一个新的分支。</li><li><code>git branch -d &lt;分支名&gt;</code>：删除指定的分支。</li><li><code>git checkout &lt;分支名&gt;</code>：切换到指定的分支。</li><li><code>git merge &lt;分支名&gt;</code>：将指定分支合并到当前分支。</li><li><code>git stash</code>：暂存当前的修改。</li></ul><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><p>使用远程仓库可以方便地与团队成员协作和共享代码，一些常见的远程操作：</p><ul><li><code>git remote add origin &lt;仓库地址&gt;</code>：关联本地仓库与远程仓库。</li><li><code>git push -u origin &lt;分支名&gt;</code>：将本地分支推送到远程仓库。</li><li><code>git pull</code>：获取远程仓库的最新代码。</li><li><code>git clone &lt;仓库地址&gt;</code>：将远程仓库克隆到本地。</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好HEXO</title>
      <link href="/2021/52638/"/>
      <url>/2021/52638/</url>
      
        <content type="html"><![CDATA[<p>欢迎光临<a href="https://huajinet.cc/">滑稽博客</a> !这是你的第一个帖子。如果您在使用滑稽博客时遇到任何问题，您可以在<a href="http://wpa.qq.com/msgrd?v=3&uin=3514825663&site=qq&menu=yes">企鹅联系我</a>上问我。</p><h2 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h2><h3 id="HEXO创建一个新帖子"><a href="#HEXO创建一个新帖子" class="headerlink" title="HEXO创建一个新帖子"></a>HEXO创建一个新帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><h3 id="HEXO运行服务器"><a href="#HEXO运行服务器" class="headerlink" title="HEXO运行服务器"></a>HEXO运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><h3 id="HEXO运行服务器-1"><a href="#HEXO运行服务器-1" class="headerlink" title="HEXO运行服务器"></a>HEXO运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><h3 id="HEXO部署到远程站点"><a href="#HEXO部署到远程站点" class="headerlink" title="HEXO部署到远程站点"></a>HEXO部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
